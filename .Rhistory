# Initialize
library(phenoTest)
library(saga)
library(sagadata)
# path to your sample data
# samplepath     <- "...path to your testfiles and sample information file (SIF)"
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
### saga_gentargets; automatically generates an empty (!) sample information file
# Modify manually according to your requirements
#targets        <- saga_gentargets(samplepath)
################################################################################
### Wrapper function - all in one
### to use: uncomment function & execute
################################################################################
mySAGAres      <- saga_wrapper(samplepath, showModel=0, doGESEA=0)
mySAGAres      <- saga_wrapper(samplepath, showModel=0, doGESEA=1)
sets        <- saga::sets
SAGA.CORE   <- setNames(split(sets, seq(nrow(sets))), rownames(sets))   # GeneSets have to be stored in a list object
SIF         <- read.delim(paste(smplpath,"/SampleInformation.txt",sep=""),row.names=1,header=TRUE,sep="\t", stringsAsFactors = F) # Sample Information File for phenoTest
smplpath<- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
sets        <- saga::sets
SAGA.CORE   <- setNames(split(sets, seq(nrow(sets))), rownames(sets))   # GeneSets have to be stored in a list object
SIF         <- read.delim(paste(smplpath,"/SampleInformation.txt",sep=""),row.names=1,header=TRUE,sep="\t", stringsAsFactors = F) # Sample Information File for phenoTest
### 1.1. Read in files from test and loop over all batches separately from here on ##############
#################################################################################################
maxBatch   <- max(as.integer(SIF$Batch))   # how many assays / batches
for(i in 1:maxBatch) {
SIF.i <- SIF[SIF$Batch==i,]
RAW.i <- limma::read.maimages(files=SIF.i$Filename, path=smplpath, source="agilent.median", green.only=T,
columns=list(G="gMedianSignal"), annotation=c("ProbeName", "GeneName"))
colnames(RAW.i) <- row.names(SIF.i)
#### 2.1. Normalize, average ###################################################################
RMA.i       <- limma::normalizeBetweenArrays(RAW.i, method="quantile")  # quantil normalize
RMA.i       <- limma::avereps(RMA.i,ID= RMA.i$genes$ProbeName)          # average replicates to one value for each probe
matrix.gsea <- RMA.i$E                                           # extract log2 expression values
#### 2.3. make ExpressionSet (Biobase) object ##################################################
metadata    <- data.frame(labelDescription= rep(NA,dim(SIF.i)[2]),row.names=colnames(SIF.i))   # varMetadata: empty, but required
phenoData   <- new("AnnotatedDataFrame",data=SIF.i, varMetadata=metadata)     # annotatedDataFrame for the annotation of the samples
#eset.gsea   <- Biobase::ExpressionSet(assayData = matrix.gsea, phenoData = phenoData)  # this is the ExpressionSet required for phenoTest
eset.gsea   <- ExpressionSet(assayData = matrix.gsea, phenoData = phenoData)  # this is the ExpressionSet required for phenoTest
#### 2.4. make ePheno object: contains the FCs associated with Group variable ##################
vars2test   <- list(ordinal="Group")    # Variables (here: Groups) to test against MOCK, which are always Group = 1 in the SIF
epheno.gsea <- phenoTest::ExpressionPhenoTest(eset.gsea,vars2test, p.adjust.method='BH')
#### 2.5 GSEA #################################################################################
SAGA.GSEA <- gsea(x=epheno.gsea, gsets=SAGA.CORE ,B=2000,                  # calculate GSEA-scores based on the FC in the epheno object
center = TRUE, test = "perm", p.adjust.method='BH')
result            <- summary(SAGA.GSEA)[,c(1,2,3,5,8)]                     # extract results (only NES- normalized enrichment scores)
# result$pred.class <- ifelse(result$nes>0,"transforming","nontransforming") # prediction based on NES
result$pred.class <- NA
for(e in 1:dim(result)[1]){
if(result$nes[e]>=2){
result$pred.class[e] <- "strong enrichment (likely genotoxic)"
} else if (result$nes[e]>=0.9 & result$nes[e]<2){
result$pred.class[e] <- "weak enrichment (potentially genotoxic)"
} else if (result$nes[e]<0.9){
result$pred.class[e] <- "no enrichment (potentially safe)"
}
}
#### 2.6 output ###############################################################################
Group <- NULL    ### pull out the Group index number from the result table
for (a in 1:nrow(result)) {Group[a] <- unlist(strsplit(as.character(result$variable[a]), ".", fixed = TRUE))[2] }
result$Group     <- Group
SIF.sub           <- SIF.i[SIF.i$Group != 1, c(3,4,1) ]                     # pull out info of tested Groups
SIF.sub$SampleID  <- row.names(SIF.sub)
result.m          <- merge(SIF.sub,result, by.x="Group", by.y = "Group") # merge result with SIF for SampleIDs and FileNames
plot(SAGA.GSEA,es.nes='nes',selGsets='SAGA.CORE')
if(saveResults==1){
write.table(result.m, file = paste(smplpath, "/result_SAGA.GSEA_Batch_",i,".txt",sep = ""), sep="\t",row.names = FALSE)
#mytext         <- cbind( paste("NES plot / ", result.m$Vector,":Group=",result.m$Group, " signature:SAGA:CORE ",
#                                       "(fdr<", round(result.m$fdr,3),")", sep="") )
for(r in 1:dim(result.m)[1]){
names(SAGA.GSEA[[r]] ) <- paste(result.m$Vector," (Group=",result.m$Group,")", sep="")
}
pdf(file=paste(smplpath, "/result_SAGA.GSEA_Batch_",i,".pdf",sep = ""), useDingbats = F, width = 11, height = 10)
grid.table(result.m,rows = NULL)
# par(col.main="#00000000")
plot(SAGA.GSEA,es.nes='nes', selGsets='SAGA.CORE' )
# mtext(mytext[i], side = 3, line=1)
dev.off()
}else{}
}
# Initialize
library(phenoTest)
library(saga)
library(sagadata)
# path to your sample data
# samplepath     <- "...path to your testfiles and sample information file (SIF)"
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
################################################################################
### Or use these single functions
################################################################################
### saga_import
rawdata        <- saga_import(smplpath=samplepath, showjoint=1)
SAGA_RAW       <- rawdata$SAGA_RAW
TEST_RAW       <- rawdata$TEST_RAW
pData.joint    <- rawdata$pData.joint
pData.Test     <- rawdata$pData.Test
### normalize saga data (plotnumber=1 for normalized boxplot, 2 for tSNE plot)
normalized     <- saga_norm(SAGA_RAW, TEST_RAW, pData.joint, plotnumber=1)
qunorm.SAGA    <- normalized$qunorm.SAGA
matrix.SAGA.qn <- normalized$matrix.SAGA.qn
matrix.test.qn <- normalized$matrix.test.qn
### remove batch effects
# plotnumber = 1 (tSNE of first 2 dimensions)
# plotnumber = 2 (PCA of first 2 dimensions)
batchnorm      <- saga_batch(matrix.SAGA.qn, matrix.test.qn, rawdata, pData.joint, plotnumber=1)
index          <- batchnorm$index
matrix.SAGA    <- batchnorm$matrix.SAGA
matrix.test    <- batchnorm$matrix.test
### Sampling and model data collection
model          <- saga_sampling(matrix.SAGA, matrix.test)
matrix.train   <- model$matrix.train
labels.train   <- model$labels.train
matrix.unknown <- model$matrix.unknown
### Array predictions with optimized SVM parameters (default settings)
output         <- saga_predict(samplepath, matrix.train, labels.train, matrix.unknown,
pData.Test, writeFile=1, showRoc=1)
classes        <- output$predictions
classes
gesea_results  <- saga_gesea(samplepath, saveResults=1)
library(phenoTest)
library(saga)
library(sagadata)
### GESEA
gesea_results  <- saga_gesea(samplepath, saveResults=1)
samplepath
sets        <- saga::sets
SAGA.CORE   <- setNames(split(sets, seq(nrow(sets))), rownames(sets))   # GeneSets have to be stored in a list object
SIF         <- read.delim(paste(smplpath,"/SampleInformation.txt",sep=""),row.names=1,header=TRUE,sep="\t", stringsAsFactors = F) # Sample Information File for phenoTest
### 1.1. Read in files from test and loop over all batches separately from here on ##############
#################################################################################################
maxBatch   <- max(as.integer(SIF$Batch))   # how many assays / batches
for(i in 1:maxBatch) {
SIF.i <- SIF[SIF$Batch==i,]
RAW.i <- limma::read.maimages(files=SIF.i$Filename, path=smplpath, source="agilent.median", green.only=T,
columns=list(G="gMedianSignal"), annotation=c("ProbeName", "GeneName"))
colnames(RAW.i) <- row.names(SIF.i)
#### 2.1. Normalize, average ###################################################################
RMA.i       <- limma::normalizeBetweenArrays(RAW.i, method="quantile")  # quantil normalize
RMA.i       <- limma::avereps(RMA.i,ID= RMA.i$genes$ProbeName)          # average replicates to one value for each probe
matrix.gsea <- RMA.i$E                                           # extract log2 expression values
#### 2.3. make ExpressionSet (Biobase) object ##################################################
metadata    <- data.frame(labelDescription= rep(NA,dim(SIF.i)[2]),row.names=colnames(SIF.i))   # varMetadata: empty, but required
phenoData   <- new("AnnotatedDataFrame",data=SIF.i, varMetadata=metadata)     # annotatedDataFrame for the annotation of the samples
#eset.gsea   <- Biobase::ExpressionSet(assayData = matrix.gsea, phenoData = phenoData)  # this is the ExpressionSet required for phenoTest
eset.gsea   <- ExpressionSet(assayData = matrix.gsea, phenoData = phenoData)  # this is the ExpressionSet required for phenoTest
#### 2.4. make ePheno object: contains the FCs associated with Group variable ##################
vars2test   <- list(ordinal="Group")    # Variables (here: Groups) to test against MOCK, which are always Group = 1 in the SIF
epheno.gsea <- phenoTest::ExpressionPhenoTest(eset.gsea,vars2test, p.adjust.method='BH')
#### 2.5 GSEA #################################################################################
SAGA.GSEA <- gsea(x=epheno.gsea, gsets=SAGA.CORE ,B=2000,                  # calculate GSEA-scores based on the FC in the epheno object
center = TRUE, test = "perm", p.adjust.method='BH')
result            <- summary(SAGA.GSEA)[,c(1,2,3,5,8)]                     # extract results (only NES- normalized enrichment scores)
# result$pred.class <- ifelse(result$nes>0,"transforming","nontransforming") # prediction based on NES
result$pred.class <- NA
for(e in 1:dim(result)[1]){
if(result$nes[e]>=2){
result$pred.class[e] <- "strong enrichment (likely genotoxic)"
} else if (result$nes[e]>=0.9 & result$nes[e]<2){
result$pred.class[e] <- "weak enrichment (potentially genotoxic)"
} else if (result$nes[e]<0.9){
result$pred.class[e] <- "no enrichment (potentially safe)"
}
}
#### 2.6 output ###############################################################################
Group <- NULL    ### pull out the Group index number from the result table
for (a in 1:nrow(result)) {Group[a] <- unlist(strsplit(as.character(result$variable[a]), ".", fixed = TRUE))[2] }
result$Group     <- Group
SIF.sub           <- SIF.i[SIF.i$Group != 1, c(3,4,1) ]                     # pull out info of tested Groups
SIF.sub$SampleID  <- row.names(SIF.sub)
result.m          <- merge(SIF.sub,result, by.x="Group", by.y = "Group") # merge result with SIF for SampleIDs and FileNames
plot(SAGA.GSEA,es.nes='nes',selGsets='SAGA.CORE')
if(saveResults==1){
write.table(result.m, file = paste(smplpath, "/result_SAGA.GSEA_Batch_",i,".txt",sep = ""), sep="\t",row.names = FALSE)
#mytext         <- cbind( paste("NES plot / ", result.m$Vector,":Group=",result.m$Group, " signature:SAGA:CORE ",
#                                       "(fdr<", round(result.m$fdr,3),")", sep="") )
for(r in 1:dim(result.m)[1]){
names(SAGA.GSEA[[r]] ) <- paste(result.m$Vector," (Group=",result.m$Group,")", sep="")
}
pdf(file=paste(smplpath, "/result_SAGA.GSEA_Batch_",i,".pdf",sep = ""), useDingbats = F, width = 11, height = 10)
grid.table(result.m,rows = NULL)
# par(col.main="#00000000")
plot(SAGA.GSEA,es.nes='nes', selGsets='SAGA.CORE' )
# mtext(mytext[i], side = 3, line=1)
dev.off()
}else{}
}
saveResults=0
sets        <- saga::sets
SAGA.CORE   <- setNames(split(sets, seq(nrow(sets))), rownames(sets))   # GeneSets have to be stored in a list object
SIF         <- read.delim(paste(smplpath,"/SampleInformation.txt",sep=""),row.names=1,header=TRUE,sep="\t", stringsAsFactors = F) # Sample Information File for phenoTest
### 1.1. Read in files from test and loop over all batches separately from here on ##############
#################################################################################################
maxBatch   <- max(as.integer(SIF$Batch))   # how many assays / batches
for(i in 1:maxBatch) {
SIF.i <- SIF[SIF$Batch==i,]
RAW.i <- limma::read.maimages(files=SIF.i$Filename, path=smplpath, source="agilent.median", green.only=T,
columns=list(G="gMedianSignal"), annotation=c("ProbeName", "GeneName"))
colnames(RAW.i) <- row.names(SIF.i)
#### 2.1. Normalize, average ###################################################################
RMA.i       <- limma::normalizeBetweenArrays(RAW.i, method="quantile")  # quantil normalize
RMA.i       <- limma::avereps(RMA.i,ID= RMA.i$genes$ProbeName)          # average replicates to one value for each probe
matrix.gsea <- RMA.i$E                                           # extract log2 expression values
#### 2.3. make ExpressionSet (Biobase) object ##################################################
metadata    <- data.frame(labelDescription= rep(NA,dim(SIF.i)[2]),row.names=colnames(SIF.i))   # varMetadata: empty, but required
phenoData   <- new("AnnotatedDataFrame",data=SIF.i, varMetadata=metadata)     # annotatedDataFrame for the annotation of the samples
#eset.gsea   <- Biobase::ExpressionSet(assayData = matrix.gsea, phenoData = phenoData)  # this is the ExpressionSet required for phenoTest
eset.gsea   <- ExpressionSet(assayData = matrix.gsea, phenoData = phenoData)  # this is the ExpressionSet required for phenoTest
#### 2.4. make ePheno object: contains the FCs associated with Group variable ##################
vars2test   <- list(ordinal="Group")    # Variables (here: Groups) to test against MOCK, which are always Group = 1 in the SIF
epheno.gsea <- phenoTest::ExpressionPhenoTest(eset.gsea,vars2test, p.adjust.method='BH')
#### 2.5 GSEA #################################################################################
SAGA.GSEA <- gsea(x=epheno.gsea, gsets=SAGA.CORE ,B=2000,                  # calculate GSEA-scores based on the FC in the epheno object
center = TRUE, test = "perm", p.adjust.method='BH')
result            <- summary(SAGA.GSEA)[,c(1,2,3,5,8)]                     # extract results (only NES- normalized enrichment scores)
# result$pred.class <- ifelse(result$nes>0,"transforming","nontransforming") # prediction based on NES
result$pred.class <- NA
for(e in 1:dim(result)[1]){
if(result$nes[e]>=2){
result$pred.class[e] <- "strong enrichment (likely genotoxic)"
} else if (result$nes[e]>=0.9 & result$nes[e]<2){
result$pred.class[e] <- "weak enrichment (potentially genotoxic)"
} else if (result$nes[e]<0.9){
result$pred.class[e] <- "no enrichment (potentially safe)"
}
}
#### 2.6 output ###############################################################################
Group <- NULL    ### pull out the Group index number from the result table
for (a in 1:nrow(result)) {Group[a] <- unlist(strsplit(as.character(result$variable[a]), ".", fixed = TRUE))[2] }
result$Group     <- Group
SIF.sub           <- SIF.i[SIF.i$Group != 1, c(3,4,1) ]                     # pull out info of tested Groups
SIF.sub$SampleID  <- row.names(SIF.sub)
result.m          <- merge(SIF.sub,result, by.x="Group", by.y = "Group") # merge result with SIF for SampleIDs and FileNames
plot(SAGA.GSEA,es.nes='nes',selGsets='SAGA.CORE')
if(saveResults==1){
write.table(result.m, file = paste(smplpath, "/result_SAGA.GSEA_Batch_",i,".txt",sep = ""), sep="\t",row.names = FALSE)
#mytext         <- cbind( paste("NES plot / ", result.m$Vector,":Group=",result.m$Group, " signature:SAGA:CORE ",
#                                       "(fdr<", round(result.m$fdr,3),")", sep="") )
for(r in 1:dim(result.m)[1]){
names(SAGA.GSEA[[r]] ) <- paste(result.m$Vector," (Group=",result.m$Group,")", sep="")
}
pdf(file=paste(smplpath, "/result_SAGA.GSEA_Batch_",i,".pdf",sep = ""), useDingbats = F, width = 11, height = 10)
grid.table(result.m,rows = NULL)
# par(col.main="#00000000")
plot(SAGA.GSEA,es.nes='nes', selGsets='SAGA.CORE' )
# mtext(mytext[i], side = 3, line=1)
dev.off()
}else{}
}
### GESEA
gesea_results  <- saga_gesea(samplepath, saveResults=0)
gesea_results  <- saga_gesea(samplepath, saveResults=0)
library(saga)
remove.packages("saga", lib="~/R/win-library/3.6")
library(saga)
# Initialize
library(phenoTest)
library(saga)
library(sagadata)
# path to your sample data
# samplepath     <- "...path to your testfiles and sample information file (SIF)"
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
### saga_gentargets; automatically generates an empty (!) sample information file
# Modify manually according to your requirements
#targets        <- saga_gentargets(samplepath)
################################################################################
### Wrapper function - all in one
### to use: uncomment function & execute
################################################################################
mySAGAres      <- saga_wrapper(samplepath, showModel=0, doGESEA=1)
################################################################################
### Or use these single functions
################################################################################
### saga_import
rawdata        <- saga_import(smplpath=samplepath, showjoint=1)
SAGA_RAW       <- rawdata$SAGA_RAW
TEST_RAW       <- rawdata$TEST_RAW
pData.joint    <- rawdata$pData.joint
pData.Test     <- rawdata$pData.Test
### normalize saga data (plotnumber=1 for normalized boxplot, 2 for tSNE plot)
normalized     <- saga_norm(SAGA_RAW, TEST_RAW, pData.joint, plotnumber=1)
qunorm.SAGA    <- normalized$qunorm.SAGA
matrix.SAGA.qn <- normalized$matrix.SAGA.qn
matrix.test.qn <- normalized$matrix.test.qn
### remove batch effects
# plotnumber = 1 (tSNE of first 2 dimensions)
# plotnumber = 2 (PCA of first 2 dimensions)
batchnorm      <- saga_batch(matrix.SAGA.qn, matrix.test.qn, rawdata, pData.joint, plotnumber=1)
index          <- batchnorm$index
matrix.SAGA    <- batchnorm$matrix.SAGA
matrix.test    <- batchnorm$matrix.test
### Sampling and model data collection
model          <- saga_sampling(matrix.SAGA, matrix.test)
matrix.train   <- model$matrix.train
labels.train   <- model$labels.train
matrix.unknown <- model$matrix.unknown
### Array predictions with optimized SVM parameters (default settings)
output         <- saga_predict(samplepath, matrix.train, labels.train, matrix.unknown,
pData.Test, writeFile=1, showRoc=1)
classes        <- output$predictions
classes
gesea_results  <- saga_gesea(samplepath, saveResults=0)
remove.packages("saga", lib="~/R/win-library/3.6")
devtools::install_github("mytalbot/saga_package")
# Initialize
library(phenoTest)
library(saga)
library(sagadata)
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
mySAGAres      <- saga_wrapper(samplepath, showModel=0, doGESEA=1)
?GSEABase
library(GSEABase)
citation(GSEABase)
citation("GSEABase")
library(saga)
pkgdown::build_site()
pkgdown::build_site()
library(phenoTest)
library(saga)
library(sagadata)
# path to your sample data
# samplepath     <- "...path to your testfiles and sample information file (SIF)"
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
################################################################################
mySAGAres      <- saga_wrapper(samplepath, showModel=0, doGESEA=1)
library(sagadata)
SAGA_Data
dim(SAGA_Data)
remove.packages("sagadata", lib="~/R/win-library/3.6")
devtools::install_github("mytalbot/sagadata")
library(sagadata)
dim(SAGA_Data)
library(sagadata)
dim(SAGA_Data)
remove.packages("sagadata", lib="~/R/win-library/3.6")
devtools::install_github("mytalbot/sagadata")
library(sagadata)
dim(SAGA_Data)
?SAGA_Data
library(saga)
library(saga)
remove.packages("saga", lib="~/R/win-library/3.6")
library(saga)
library(saga)
library(saga)
devtools::install_github("mytalbot/saga_package")
library(saga)
library(GESEAbase)
library(phenoTest)
library(saga)
library(sagadata)
# path to your sample data
# samplepath     <- "...path to your testfiles and sample information file (SIF)"
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
################################################################################
### Or use these single functions
################################################################################
### saga_import
rawdata        <- saga_import(smplpath=samplepath, showjoint=1)
SAGA_RAW       <- rawdata$SAGA_RAW
TEST_RAW       <- rawdata$TEST_RAW
pData.joint    <- rawdata$pData.joint
pData.Test     <- rawdata$pData.Test
### normalize saga data (plotnumber=1 for normalized boxplot, 2 for tSNE plot)
normalized     <- saga_norm(SAGA_RAW, TEST_RAW, pData.joint, plotnumber=1)
qunorm.SAGA    <- normalized$qunorm.SAGA
matrix.SAGA.qn <- normalized$matrix.SAGA.qn
matrix.test.qn <- normalized$matrix.test.qn
### remove batch effects
# plotnumber = 1 (tSNE of first 2 dimensions)
# plotnumber = 2 (PCA of first 2 dimensions)
batchnorm      <- saga_batch(matrix.SAGA.qn, matrix.test.qn, rawdata, pData.joint, plotnumber=1)
index          <- batchnorm$index
matrix.SAGA    <- batchnorm$matrix.SAGA
matrix.test    <- batchnorm$matrix.test
### Sampling and model data collection
model          <- saga_sampling(matrix.SAGA, matrix.test)
matrix.train   <- model$matrix.train
labels.train   <- model$labels.train
matrix.unknown <- model$matrix.unknown
### Array predictions with optimized SVM parameters (default settings)
output         <- saga_predict(samplepath, matrix.train, labels.train, matrix.unknown,
pData.Test, writeFile=1, showRoc=1)
classes        <- output$predictions
classes
### GESEA
gesea_results  <- saga_gesea(samplepath, saveResults=0)
remove.packages("phenoTest", lib="~/R/win-library/3.6")
library(phenoTest)
library(phenoTest)
?phenoTest
library(devtools)
build_github_devtools()
remove.packages("devtools", lib="~/R/win-library/3.6")
devtools::install_github("hadley/devtools")
library(installr)
check.for.updates.R()
install.R()
copy.packages.between.libraries()
install.packages("devtools")
devtools::use_package(phenoTest)
devtools::use_package("phenoTest")
library(devtools)
devtools::use_package("phenoTest")
devtools::document()
BiocManager::install("phenoTest")
BiocManager::install("phenoTest")
devtools::document()
devtools::document()
devtools::document()
library(saga)
devtools::document()
library(saga)
remove.packages("saga", lib="~/R/win-library/3.6")
remove.packages("sagadata", lib="~/R/win-library/3.6")
devtools::install_github("mytalbot/sagadata")
devtools::install_github("mytalbot/saga_package")
remove.packages("limma", lib="~/R/win-library/3.6")
BiocManager::install("limma")
library(limma)
BiocManager::install("limma")
BiocManager::install("limma")
detach("package:limma", unload=TRUE)
detach(limma)
R --vanilla
BiocManager::install("limma")
remove.packages("yaml", lib="~/R/win-library/3.6")
install.packages("yaml")
library(saga)
remove.packages("saga", lib="~/R/win-library/3.6")
remove.packages("sagadata", lib="~/R/win-library/3.6")
devtools::install_github("mytalbot/sagadata")
devtools::install_github("mytalbot/saga_package")
library(saga)
library(sagadata)
# path to your sample data
# samplepath     <- "...path to your testfiles and sample information file (SIF)"
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
mySAGAres      <- saga_wrapper(samplepath, showModel=0, doGESEA=1)
################################################################################
### Or use these single functions
################################################################################
### saga_import
rawdata        <- saga_import(smplpath=samplepath, showjoint=1)
SAGA_RAW       <- rawdata$SAGA_RAW
TEST_RAW       <- rawdata$TEST_RAW
pData.joint    <- rawdata$pData.joint
pData.Test     <- rawdata$pData.Test
library(saga)
library(sagadata)
# samplepath     <- "...path to your testfiles and sample information file (SIF)"
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
################################################################################
### Or use these single functions
################################################################################
### saga_import
rawdata        <- saga_import(smplpath=samplepath, showjoint=1)
library(saga)
library(sagadata)
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
################################################################################
### Or use these single functions
################################################################################
### saga_import
rawdata        <- saga_import(smplpath=samplepath, showjoint=1)
smplpath=samplepath
showjoint=1
Annotation          <- saga::Annotation
pData               <- saga::pData
SAGA_Data           <- SAGA_Data
SAGA_RAW            <- as.matrix(SAGA_Data[,-1] )
row.names(SAGA_RAW) <- SAGA_Data$PROBE_ID
### Read in .txt files from validation set: ####################################################
################################################################################################
SIF                     <- read.delim(paste(smplpath,"/SampleInformation.txt",sep=""),row.names=1,header=TRUE,sep="\t", stringsAsFactors = F) # Sample Information File for phenoTest
pData.Test              <- read.delim(paste(smplpath,"/SampleInformation.txt",sep=""),row.names=1,header=TRUE,sep="\t", stringsAsFactors = F) # Sample Information File for SAGA-SVM
pData.Test$Batch        <- pData.Test$Batch + 19              # 19 Batches are already in the SAGA Inbuild DataSet
pData.Test$IVIM_Color   <- rep("#000000", nrow(pData.Test))
pData.Test$Design_Color <- rep("#000000", nrow(pData.Test))
pData.Test$IVIM_ID      <- rep(NA, nrow(pData.Test))
pData.Test$IVIM_Farbe   <- rep("#000000", nrow(pData.Test))
TEST_Data               <- read.maimages(files=pData.Test$Filename, path=smplpath, source="agilent.median", green.only=T,
columns=list(G="gMedianSignal"), annotation=c("ProbeName", "GeneName"))
?read.maimages
library(limma)
TEST_Data               <- read.maimages(files=pData.Test$Filename, path=smplpath, source="agilent.median", green.only=T,
columns=list(G="gMedianSignal"), annotation=c("ProbeName", "GeneName"))
library(saga)
library(saga)
library(sagadata)
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
################################################################################
### Or use these single functions
################################################################################
### saga_import
rawdata        <- saga_import(smplpath=samplepath, showjoint=1)
library(saga)
remove.packages("saga", lib="~/R/win-library/3.6")
remove.packages("sagadata", lib="~/R/win-library/3.6")
devtools::install_github("mytalbot/sagadata")
devtools::install_github("mytalbot/saga_package")
devtools::install_github("mytalbot/saga_package")
devtools::install_github("mytalbot/saga_package")
devtools::install_github("mytalbot/saga_package")
library(saga)
library(sagadata)
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
################################################################################
### Or use these single functions
################################################################################
### saga_import
rawdata        <- saga_import(smplpath=samplepath, showjoint=1)
