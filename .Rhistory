SAGA.CORE   <- setNames(split(sets, seq(nrow(sets))), rownames(sets))   # GeneSets have to be stored in a list object
SIF         <- read.delim(paste(smplpath,"/SampleInformation.txt",sep=""),row.names=1,header=TRUE,sep="\t", stringsAsFactors = F) # Sample Information File for phenoTest
smplpath<- samplepath
saveResults=1
sets        <- saga::sets
SAGA.CORE   <- setNames(split(sets, seq(nrow(sets))), rownames(sets))   # GeneSets have to be stored in a list object
SIF         <- read.delim(paste(smplpath,"/SampleInformation.txt",sep=""),row.names=1,header=TRUE,sep="\t", stringsAsFactors = F) # Sample Information File for phenoTest
### 1.1. Read in files from test and loop over all batches separately from here on ##############
#################################################################################################
maxBatch   <- max(as.integer(SIF$Batch))   # how many assays / batches
for(i in 1:maxBatch) {
SIF.i <- SIF[SIF$Batch==i,]
RAW.i <- limma::read.maimages(files=SIF.i$Filename, path=smplpath, source="agilent.median", green.only=T,
columns=list(G="gMedianSignal"), annotation=c("ProbeName", "GeneName"))
colnames(RAW.i) <- row.names(SIF.i)
#### 2.1. Normalize, average ###################################################################
RMA.i       <- limma::normalizeBetweenArrays(RAW.i, method="quantile")  # quantil normalize
RMA.i       <- limma::avereps(RMA.i,ID= RMA.i$genes$ProbeName)          # average replicates to one value for each probe
matrix.gsea <- RMA.i$E                                           # extract log2 expression values
#### 2.3. make ExpressionSet (Biobase) object ##################################################
metadata    <- data.frame(labelDescription= rep(NA,dim(SIF.i)[2]),row.names=colnames(SIF.i))   # varMetadata: empty, but required
phenoData   <- new("AnnotatedDataFrame",data=SIF.i, varMetadata=metadata)     # annotatedDataFrame for the annotation of the samples
eset.gsea   <- Biobase::ExpressionSet(assayData = matrix.gsea, phenoData = phenoData)  # this is the ExpressionSet required for phenoTest
#### 2.4. make ePheno object: contains the FCs associated with Group variable ##################
vars2test   <- list(ordinal="Group")    # Variables (here: Groups) to test against MOCK, which are always Group = 1 in the SIF
epheno.gsea <- phenoTest::ExpressionPhenoTest(eset.gsea,vars2test,p.adjust.method='BH')
#### 2.5 GSEA #################################################################################
SAGA.GSEA <- gsea(x=epheno.gsea, gsets=SAGA.CORE ,B=2000,                  # calculate GSEA-scores based on the FC in the epheno object
center = TRUE, test = "perm", p.adjust.method='BH')
result            <- summary(SAGA.GSEA)[,c(1,2,3,5,8)]                     # extract results (only NES- normalized enrichment scores)
# result$pred.class <- ifelse(result$nes>0,"transforming","nontransforming") # prediction based on NES
result$pred.class <- NA
for(e in 1:dim(result)[1]){
if(result$nes[e]>=2){
result$pred.class[e] <- "strong enrichment (likely genotoxic)"
} else if (result$nes[e]>=0.9 & result$nes[e]<2){
result$pred.class[e] <- "weak enrichment (potentially genotoxic)"
} else if (result$nes[e]<0.9){
result$pred.class[e] <- "no enrichment (potentially safe)"
}
}
#### 2.6 output ###############################################################################
Group <- NULL    ### pull out the Group index number from the result table
for (a in 1:nrow(result)) {Group[a] <- unlist(strsplit(as.character(result$variable[a]), ".", fixed = TRUE))[2] }
result$Group     <- Group
SIF.sub           <- SIF.i[SIF.i$Group != 1, c(3,4,1) ]                     # pull out info of tested Groups
SIF.sub$SampleID  <- row.names(SIF.sub)
result.m          <- merge(SIF.sub,result, by.x="Group", by.y = "Group") # merge result with SIF for SampleIDs and FileNames
plot(SAGA.GSEA,es.nes='nes',selGsets='SAGA.CORE')
if(saveResults==1){
write.table(result.m, file = paste(smplpath, "/result_SAGA.GSEA_Batch_",i,".txt",sep = ""), sep="\t",row.names = FALSE)
#mytext         <- cbind( paste("NES plot / ", result.m$Vector,":Group=",result.m$Group, " signature:SAGA:CORE ",
#                                       "(fdr<", round(result.m$fdr,3),")", sep="") )
for(r in 1:dim(result.m)[1]){
names(SAGA.GSEA[[r]] ) <- paste(result.m$Vector," (Group=",result.m$Group,")", sep="")
}
pdf(file=paste(smplpath, "/result_SAGA.GSEA_Batch_",i,".pdf",sep = ""), useDingbats = F, width = 11, height = 10)
grid.table(result.m,rows = NULL)
# par(col.main="#00000000")
plot(SAGA.GSEA,es.nes='nes', selGsets='SAGA.CORE' )
# mtext(mytext[i], side = 3, line=1)
dev.off()
}else{}
}
i=1
SIF.i <- SIF[SIF$Batch==i,]
RAW.i <- limma::read.maimages(files=SIF.i$Filename, path=smplpath, source="agilent.median", green.only=T,
columns=list(G="gMedianSignal"), annotation=c("ProbeName", "GeneName"))
colnames(RAW.i) <- row.names(SIF.i)
ames(RAW.i) <- row.names(SIF.i)
#### 2.1. Normalize, average ###################################################################
RMA.i       <- limma::normalizeBetweenArrays(RAW.i, method="quantile")  # quantil normalize
RMA.i       <- limma::avereps(RMA.i,ID= RMA.i$genes$ProbeName)          # average replicates to one value for each probe
matrix.gsea <- RMA.i$E                                           # extract log2 expression values
SIF.i <- SIF[SIF$Batch==i,]
RAW.i <- limma::read.maimages(files=SIF.i$Filename, path=smplpath, source="agilent.median", green.only=T,
columns=list(G="gMedianSignal"), annotation=c("ProbeName", "GeneName"))
colnames(RAW.i) <- row.names(SIF.i)
#### 2.1. Normalize, average ###################################################################
RMA.i       <- limma::normalizeBetweenArrays(RAW.i, method="quantile")  # quantil normalize
RMA.i       <- limma::avereps(RMA.i,ID= RMA.i$genes$ProbeName)          # average replicates to one value for each probe
matrix.gsea <- RMA.i$E
#### 2.3. make ExpressionSet (Biobase) object ##################################################
metadata    <- data.frame(labelDescription= rep(NA,dim(SIF.i)[2]),row.names=colnames(SIF.i))   # varMetadata: empty, but required
phenoData   <- new("AnnotatedDataFrame",data=SIF.i, varMetadata=metadata)     # annotatedDataFrame for the annotation of the samples
eset.gsea   <- Biobase::ExpressionSet(assayData = matrix.gsea, phenoData = phenoData)  # this is the ExpressionSet required for phenoTest
vars2test   <- list(ordinal="Group")    # Variables (here: Groups) to test against MOCK, which are always Group = 1 in the SIF
epheno.gsea <- phenoTest::ExpressionPhenoTest(eset.gsea,vars2test,p.adjust.method='BH')
eset.gsea
vars2test
?ExpressionPhenoTest
epheno.gsea <- phenoTest::ExpressionPhenoTest(eset.gsea,vars2test, p.adjust.method='BH')
list(ordinal="Group")
ExpressionPhenoTest(eset.gsea,vars2test, p.adjust.method='BH')
phenoTest::ExpressionPhenoTest(eset.gsea,vars2test, p.adjust.method='BH')
metadata    <- data.frame(labelDescription= rep(NA,dim(SIF.i)[2]),row.names=colnames(SIF.i))   # varMetadata: empty, but required
phenoData   <- new("AnnotatedDataFrame",data=SIF.i, varMetadata=metadata)     # annotatedDataFrame for the annotation of the samples
eset.gsea   <- Biobase::ExpressionSet(assayData = matrix.gsea, phenoData = phenoData)  # this is the ExpressionSet required for phenoTest
#### 2.4. make ePheno object: contains the FCs associated with Group variable ##################
vars2test   <- list(ordinal="Group")    # Variables (here: Groups) to test against MOCK, which are always Group = 1 in the SIF
epheno.gsea <- phenoTest::ExpressionPhenoTest(eset.gsea,vars2test, p.adjust.method='BH')
validObject(eset.gsea)
exp <- Biobase::exprs(gse)
Biobase::exprs(gse) <- exp
exp <- Biobase::exprs(eset.gsea)
Biobase::exprs(eset.gsea) <- exp
epheno.gsea <- phenoTest::ExpressionPhenoTest(eset.gsea,vars2test, p.adjust.method='BH')
exp                 <- Biobase::exprs(assayData = matrix.gsea, phenoData = phenoData)
Biobase::exprs(eset.gsea)
exp                 <- Biobase::exprs(eset.gsea)
exp
Biobase::exprs(eset.gsea) <- exp
eset.gsea
phenoTest::ExpressionPhenoTest(eset.gsea,vars2test, p.adjust.method='BH')
phenoTest::ExpressionPhenoTest(exp,vars2test, p.adjust.method='BH')
exprs(eset.gsea)
eset.gsea   <- Biobase::ExpressionSet(assayData = matrix.gsea, phenoData = phenoData)
eset.gsea
vars2test   <- list(ordinal="Group")    # Variables (here: Groups) to test against MOCK, which are always Group = 1 in the SIF
epheno.gsea <- phenoTest::ExpressionPhenoTest(eset.gsea,vars2test, p.adjust.method='BH')
SAGA.GSEA <- gsea(x=epheno.gsea, gsets=SAGA.CORE ,B=2000,                  # calculate GSEA-scores based on the FC in the epheno object
center = TRUE, test = "perm", p.adjust.method='BH')
epheno.gsea <- phenoTest::ExpressionPhenoTest(eset.gsea,vars2test, p.adjust.method='BH')
epheno.gsea
SAGA.CORE
phenoTest::ExpressionPhenoTest(eset.gsea,vars2test, p.adjust.method='BH')
?exprs
Biobase::exprs()
mySAGAres      <- saga_wrapper(samplepath, showModel=0, doGESEA=0)
saga::Top12
saga::sets
################################################################################################
############################### 9. SAGA-GSEA  ##################################################
################################################################################################
library(phenoTest)
library(gridExtra)
################################################################################################
#### 1. Data handling ##########################################################################
################################################################################################
# all the following is new in V6:
sets     <- read.delim("./SAGA_INBUILD/SAGA_INBUILD_Top20rfe_GSEA.txt",header=FALSE,sep="\t",stringsAsFactors =FALSE,row.names = 1)
SAGA.CORE<- setNames(split(sets, seq(nrow(sets))), rownames(sets))   # GeneSets have to be stored in a list object
################################################################################################
#### 1. Classifier validation in independent test set  #########################################
################################################################################################
library(limma)
library(bapred)
library(Rtsne)
library(caret)
library(kernlab)
library(dplyr)
library(doMC)
library(parallel)
nc <- detectCores()
registerDoMC(cores = (nc-2))
################################################################################################
#### 1. SAGA data: 91 training samples and optimal predictors ##################################
################################################################################################
pData       <- read.delim("./SAGA_INBUILD/SAGA_INBUILD_91_Samples.txt",row.names=1,header=TRUE,sep="\t",stringsAsFactors =FALSE)                 # annotation of training samples
Annotation  <- read.delim("./SAGA_INBUILD/SAGA_Annotation_FINAL_KNOWN_20181128.txt",header=TRUE,sep="\t",stringsAsFactors =FALSE, row.names = 1) # annotation of PROBES (only known probes)
Top         <- read.delim("./SAGA_INBUILD/SAGA_INBUILD_Top11GA_FINAL.txt",header=TRUE,sep="\t",stringsAsFactors =FALSE, row.names = 1)           # load Top predictors
SAGA_Data   <- read.delim("./SAGA_INBUILD/SAGA_INBUILD_Data_AVE_91.txt",header=TRUE,sep="\t",stringsAsFactors =FALSE)                            # averaged RAW expression matrix of 91 training samples
SAGA_RAW            <- as.matrix(SAGA_Data[,-1])
row.names(SAGA_RAW) <- SAGA_Data$PROBE_ID
SAGA_RAW            <- SAGA_RAW[row.names(Annotation),] # Expressionmatrix of 36226 annotated probes x 91 Training samples
################################################################################################
### 2. Read in .txt files from user (test set) #################################################
################################################################################################
SIF                     <- read.delim("SampleInformation.txt",row.names=1,header=TRUE,sep="\t", stringsAsFactors = F) # Sample Information File for phenoTest
pData.Test              <- read.delim("SampleInformation.txt",row.names=1,header=TRUE,sep="\t", stringsAsFactors = F) # Sample Information File for SAGA-SVM
pData.Test$Batch        <- pData.Test$Batch + 11              # 11 Batches are already in the SAGA Inbuild DataSet
pData.Test$IVIM_Color   <- rep("#000000", nrow(pData.Test))   # new samples are black
pData.Test$Design_Color <- rep("#000000", nrow(pData.Test))
pData.Test$IVIM_ID      <- rep(NA, nrow(pData.Test))
pData.Test$IVIM_Farbe   <- rep("#000000", nrow(pData.Test))
TEST_Data               <- read.maimages(files=pData.Test$Filename, path=".", source="agilent.median", green.only=T,
columns=list(G="gMedianSignal"), annotation=c("ProbeName", "GeneName"))
colnames(TEST_Data)     <- row.names(pData.Test)
TEST_RAW                <- TEST_Data$E                                       # export Expression matrix
row.names(TEST_RAW)     <- TEST_Data$genes$ProbeName                         # assign PROBE IDs as row.names
TEST_RAW                <- avereps(TEST_RAW, ID= row.names(TEST_RAW))        # collapse quadruplicate probes
TEST_RAW                <- TEST_RAW[row.names(SAGA_RAW),]                    # Expressionmatrix of Test Set with 36226 annotated probes
### 2.1 Make joint sample information file ####################################################
################################################################################################
all(colnames(pData.Test) == colnames(pData))
pData.joint <- rbind(pData,pData.Test)
### Boxplot of RAW intensity distribution (test samples are in black) ##
pdf(file="Boxplot_RAW.pdf",useDingbats = F,width = 6, height = 5)
boxplot(log2(cbind(SAGA_RAW,TEST_RAW)),col=pData.joint$IVIM_Farbe, names=pData.joint$Name,boxwex=0.6,cex.axis=0.5,las=2,outline=FALSE)
dev.off()
################################################################################################
#### 3.  Add-on Quantile Normalization #########################################################
###################################################################################ä############
qunorm.SAGA     <- qunormtrain(t(SAGA_RAW))
matrix.SAGA.qn  <- log2(t(qunorm.SAGA$xnorm))
matrix.test.qn  <- log2(t(qunormaddon(qunorm.SAGA, t(TEST_RAW))))
### Boxplot of quantile normalized intensity distribution ##
pdf(file="Boxplot_quantile normalized.pdf",useDingbats = F,width = 6, height = 5)
boxplot(cbind(matrix.SAGA.qn,matrix.test.qn),col=pData.joint$IVIM_Farbe,names=pData.joint$Name,boxwex=0.6,cex.axis=0.5,las=2,outline=FALSE)
dev.off()
#### 3.1 t-SNE reveals batch effects in quantile-normalized data  ##############################
###################################################################################ä############
matrix.joint.qn <- cbind(matrix.SAGA.qn,matrix.test.qn)
## for robustness of t-SNE prior dimensionality reduction with PCA is performed (initial dimensions = 50 (default))
set.seed(12)
tsne_out.qn <- Rtsne(t(matrix.joint.qn),dims = 2, perplexity = 16,
theta = 0.5, check_duplicates = FALSE, pca = TRUE, max_iter = 1000,
verbose = FALSE, is_distance = FALSE)
pdf(file="tSNE_quantile normalized.pdf",useDingbats = F,width = 5, height = 5)
plot(tsne_out.qn$Y,col=pData.joint$IVIM_Farbe, pch=16, cex=1.3) ### test samples are in black
dev.off()
################################################################################################
#### 4. Add-on COMBAT batch correction #########################################################
################################################################################################
batch.SAGA   <- as.factor(pData$Batch)
combat.SAGA  <- combatba(t(matrix.SAGA.qn), batch = batch.SAGA)
matrix.SAGA  <- t(combat.SAGA$xadj)
colnames(matrix.SAGA) <- row.names(pData)
matrix.test  <- t(combatbaaddon(combat.SAGA, t(matrix.test.qn), batch = as.factor(SIF$Batch)))
#### 4.2 t-SNE of batch corrected dataset ######################################################
###################################################################################ä############
matrix.joint <- cbind(matrix.SAGA,matrix.test)
set.seed(59)
tsne_out <- Rtsne(t(matrix.joint),dims = 2, perplexity = 16,
theta = 0.5, check_duplicates = FALSE, pca = TRUE, max_iter = 1000,
verbose = FALSE, is_distance = FALSE)
pdf(file="tSNE_quantile normalized_COMBAT.pdf",useDingbats = F,width = 5, height = 5)
plot(tsne_out$Y,col=pData.joint$IVIM_Farbe, pch=16, cex=1.3)
dev.off()
################################################################################################
#### 5. PCA on 11 best Predictors found by genetic algorithm ###################################
################################################################################################
matrix.Top   <- cbind(matrix.SAGA, matrix.test)[row.names(Top),]
index        <- nrow(pData)+nrow(pData.Test)
pdf(file="PCA_SAGA_optVars_new samples.pdf",useDingbats = F,width = 6, height = 5)
pca     <- prcomp(t(matrix.Top))
plot(pca$x, pch=16, col=pData.joint$Design_Color, cex=1, asp=1)
legend(1,-2, legend = c("transforming","mock","neutral","new samples"), col = unique(pData.joint$Design_Color), pch=16, bty="n", cex=0.8)
text(pca$x[c((nrow(pData)+1):index),c(1:2)], labels=pData.Test$Filename, cex= 0.3, pos=3, offset = 0.3) # new in V6: (nrow(pData)+1)
dev.off()
################################################################################################
#### 6. Caret SVMrad ###########################################################################
################################################################################################
matrix.train   <- t(matrix.SAGA[row.names(Top),])
labels.train   <- as.factor(pData$TrueLabel)
matrix.unknown <- t(matrix.test[row.names(Top),])
#### 6.1 Caret SVM on ClassProbs ###############################################################
################################################################################################
set.seed(45)
svm_fit.ROC <- train(matrix.train,labels.train,
method = "svmRadial",
tuneLength = 20,
trControl = trainControl(method = "repeatedcv",number = 10, repeats = 5,
classProbs = TRUE,summaryFunction = twoClassSummary))
svm_fit.ROC
Prediction_SVM.Caret <- predict(svm_fit.ROC, matrix.unknown, type = "prob")
Prediction_SVM.Caret$Prediction.SVM.Caret <- ifelse(Prediction_SVM.Caret$transforming>0.50,"transforming","untransforming")
Prediction_SVM.Caret <- cbind(pData.Test[,c(1:5)],Prediction_SVM.Caret)
write.table(Prediction_SVM.Caret, file = paste("Predictions.txt",sep = ""), sep="\t",row.names = TRUE,col.names=NA)
sets     <- read.delim("./SAGA_INBUILD/SAGA_INBUILD_Top20rfe_GSEA.txt",header=FALSE,sep="\t",stringsAsFactors =FALSE,row.names = 1)
SAGA.CORE<- setNames(split(sets, seq(nrow(sets))), rownames(sets))   # GeneSets have to be stored in a list object
ExpressionPhenoTest(eset.gsea,vars2test, p.adjust.method='BH')
phenoTest::ExpressionPhenoTest(eset.gsea,vars2test, p.adjust.method='BH')
library(saga)
library(saga)
library(sagadata)
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples" #path to SAGA samples"
### saga_gentargets; automatically generates an empty (!) sample information file
# Modify manually according to your requirements
#targets        <- saga_gentargets(samplepath)
################################################################################
### Wrapper function - all in one
### to use: uncomment function & execute
################################################################################
mySAGAres      <- saga_wrapper(samplepath, showModel=0, doGESEA=0)
gesea_results  <- saga_gesea(samplepath, saveResults=0)
library(saga)
library(saga)
gesea_results  <- saga_gesea(samplepath, saveResults=0)
dim(SAGA_Data)
source('C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga/R/saga_import.R', echo=TRUE)
library(saga)
warnings()
library(saga)
library(sagadata)
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples" #path to SAGA samples"
################################################################################
### Or use these single functions
################################################################################
### saga_import
rawdata        <- saga_import(samplepath, SAGA_Data, showjoint=1)
SAGA_RAW       <- rawdata$SAGA_RAW
TEST_RAW       <- rawdata$TEST_RAW
pData.joint    <- rawdata$pData.joint
pData.Test     <- rawdata$pData.Test
samplepath
SAGA_Data
saga_import(samplepath, SAGA_Data, showjoint=1)
SAGA_Data
Annotation          <- saga::Annotation
pData               <- saga::pData
################################################################################
### Or use these single functions
################################################################################
### saga_import
rawdata        <- saga_import(samplepath, showjoint=1)
SAGA_RAW       <- rawdata$SAGA_RAW
TEST_RAW       <- rawdata$TEST_RAW
pData.joint    <- rawdata$pData.joint
pData.Test     <- rawdata$pData.Test
library(saga)
library(sagadata)
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
### saga_gentargets; automatically generates an empty (!) sample information file
# Modify manually according to your requirements
#targets        <- saga_gentargets(samplepath)
################################################################################
### Wrapper function - all in one
### to use: uncomment function & execute
################################################################################
mySAGAres      <- saga_wrapper(samplepath, showModel=0, doGESEA=1)
# catch some errors
#path                <- getwd()
################################################################################################
#### 1. SAGA data: 91 training samples and 9 predictors found by genetic algorithm #############
################################################################################################
# load internal data
Annotation          <- saga::Annotation
pData               <- saga::pData
#targets             <- saga::saga_targets
SAGA_Data           <- SAGA_Data #read.delim(system.file("extdata", "SAGA_INBUILD_Data_AVE_91.txt", package = "saga"),header=TRUE,sep="\t", stringsAsFactors =FALSE)
SAGA_RAW            <- as.matrix(SAGA_Data[,-1] )
row.names(SAGA_RAW) <- SAGA_Data$PROBE_ID
### Read in .txt files from validation set: ####################################################
################################################################################################
SIF                     <- read.delim(paste(smplpath,"/SampleInformation.txt",sep=""),row.names=1,header=TRUE,sep="\t", stringsAsFactors = F) # Sample Information File for phenoTest
pData.Test              <- read.delim(paste(smplpath,"/SampleInformation.txt",sep=""),row.names=1,header=TRUE,sep="\t", stringsAsFactors = F) # Sample Information File for SAGA-SVM
pData.Test$Batch        <- pData.Test$Batch + 19
smplpath
smplpath=samplepath
Annotation          <- saga::Annotation
pData               <- saga::pData
#targets             <- saga::saga_targets
SAGA_Data           <- SAGA_Data #read.delim(system.file("extdata", "SAGA_INBUILD_Data_AVE_91.txt", package = "saga"),header=TRUE,sep="\t", stringsAsFactors =FALSE)
SAGA_RAW            <- as.matrix(SAGA_Data[,-1] )
row.names(SAGA_RAW) <- SAGA_Data$PROBE_ID
### Read in .txt files from validation set: ####################################################
################################################################################################
SIF                     <- read.delim(paste(smplpath,"/SampleInformation.txt",sep=""),row.names=1,header=TRUE,sep="\t", stringsAsFactors = F) # Sample Information File for phenoTest
pData.Test              <- read.delim(paste(smplpath,"/SampleInformation.txt",sep=""),row.names=1,header=TRUE,sep="\t", stringsAsFactors = F) # Sample Information File for SAGA-SVM
pData.Test$Batch        <- pData.Test$Batch + 19
smplpath
smplpath=samplepath
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
smplpath=samplepath
smplpath
SIF                     <- read.delim(paste(smplpath,"/SampleInformation.txt",sep=""),row.names=1,header=TRUE,sep="\t", stringsAsFactors = F) # Sample Information File for phenoTest
pData.Test              <- read.delim(paste(smplpath,"/SampleInformation.txt",sep=""),row.names=1,header=TRUE,sep="\t", stringsAsFactors = F) # Sample Information File for SAGA-SVM
pData.Test$Batch        <- pData.Test$Batch + 19              # 19 Batches are already in the SAGA Inbuild DataSet
pData.Test$IVIM_Color   <- rep("#000000", nrow(pData.Test))
pData.Test$Design_Color <- rep("#000000", nrow(pData.Test))
pData.Test$IVIM_ID      <- rep(NA, nrow(pData.Test))
pData.Test$IVIM_Farbe   <- rep("#000000", nrow(pData.Test))
TEST_Data               <- read.maimages(files=pData.Test$Filename, path=smplpath, source="agilent.median", green.only=T,
columns=list(G="gMedianSignal"), annotation=c("ProbeName", "GeneName"))
?read.maimages
library(limma)
TEST_Data               <- read.maimages(files=pData.Test$Filename, path=smplpath, source="agilent.median", green.only=T,
columns=list(G="gMedianSignal"), annotation=c("ProbeName", "GeneName"))
colnames(TEST_Data)     <- row.names(pData.Test)
TEST_RAW                <- TEST_Data$E                                       # export Expression matrix
row.names(TEST_RAW)     <- TEST_Data$genes$ProbeName                         # assign PROBE IDs as row.names
TEST_RAW                <- avereps(TEST_RAW, ID= row.names(TEST_RAW))        # collapse quadruplicate probes
TEST_RAW                <- TEST_RAW[row.names(SAGA_RAW),]                    # Expressionmatrix of Test Set with 36226 annotated probes
all( colnames(pData.Test) == colnames(pData) )
pData.joint <- rbind(pData,pData.Test)
matrix.joint<- cbind(SAGA_RAW,TEST_RAW)
boxplot(log2(cbind(SAGA_RAW,TEST_RAW)),
col       = pData.joint$IVIM_Farbe,
names     = pData.joint$Filename,
boxwex    = 0.6,
cex.axis  = 0.5,
las       = 2,
outline   = FALSE,
main      = "SAGA joint data set (raw)")
pData.joint
pData.joint$Filename
pData.joint
TEST_RAW
boxplot(log2(cbind(SAGA_RAW,TEST_RAW)),
col       = pData.joint$IVIM_Farbe,
#names     = pData.joint$Filename,
boxwex    = 0.6,
cex.axis  = 0.5,
las       = 2,
outline   = FALSE,
main      = "SAGA joint data set (raw)")
pData.joint$IVIM_Farbe
length(pData.joint$IVIM_Farbe)
length(pData.joint$Filename)
pData.joint$Filename
boxplot(log2(cbind(SAGA_RAW,TEST_RAW)),
col       = pData.joint$IVIM_Farbe,
names     = pData.joint$Filename,
boxwex    = 0.6,
cex.axis  = 0.5,
las       = 2,
outline   = FALSE,
main      = "SAGA joint data set (raw)")
TEST_RAW
dim(TEST_RAW)
dim(SAGA_RAW)
SAGA_Data
dim(SAGA_Data)
library(saga)
smplpath=samplepath
showjoint=1
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
### sag
smplpath=samplepath
showjoint=1
################################################################################################
#### 1. SAGA data: 91 training samples and 9 predictors found by genetic algorithm #############
################################################################################################
# load internal data
Annotation          <- saga::Annotation
pData               <- saga::pData
#targets             <- saga::saga_targets
SAGA_Data           <- SAGA_Data #read.delim(system.file("extdata", "SAGA_INBUILD_Data_AVE_91.txt", package = "saga"),header=TRUE,sep="\t", stringsAsFactors =FALSE)
SAGA_RAW            <- as.matrix(SAGA_Data[,-1] )
row.names(SAGA_RAW) <- SAGA_Data$PROBE_ID
### Read in .txt files from validation set: ####################################################
################################################################################################
SIF                     <- read.delim(paste(smplpath,"/SampleInformation.txt",sep=""),row.names=1,header=TRUE,sep="\t", stringsAsFactors = F) # Sample Information File for phenoTest
pData.Test              <- read.delim(paste(smplpath,"/SampleInformation.txt",sep=""),row.names=1,header=TRUE,sep="\t", stringsAsFactors = F) # Sample Information File for SAGA-SVM
pData.Test$Batch        <- pData.Test$Batch + 19              # 19 Batches are already in the SAGA Inbuild DataSet
pData.Test$IVIM_Color   <- rep("#000000", nrow(pData.Test))
pData.Test$Design_Color <- rep("#000000", nrow(pData.Test))
pData.Test$IVIM_ID      <- rep(NA, nrow(pData.Test))
pData.Test$IVIM_Farbe   <- rep("#000000", nrow(pData.Test))
TEST_Data               <- read.maimages(files=pData.Test$Filename, path=smplpath, source="agilent.median", green.only=T,
columns=list(G="gMedianSignal"), annotation=c("ProbeName", "GeneName"))
library(limma)
################################################################################################
SIF                     <- read.delim(paste(smplpath,"/SampleInformation.txt",sep=""),row.names=1,header=TRUE,sep="\t", stringsAsFactors = F) # Sample Information File for phenoTest
pData.Test              <- read.delim(paste(smplpath,"/SampleInformation.txt",sep=""),row.names=1,header=TRUE,sep="\t", stringsAsFactors = F) # Sample Information File for SAGA-SVM
pData.Test$Batch        <- pData.Test$Batch + 19              # 19 Batches are already in the SAGA Inbuild DataSet
pData.Test$IVIM_Color   <- rep("#000000", nrow(pData.Test))
pData.Test$Design_Color <- rep("#000000", nrow(pData.Test))
pData.Test$IVIM_ID      <- rep(NA, nrow(pData.Test))
pData.Test$IVIM_Farbe   <- rep("#000000", nrow(pData.Test))
TEST_Data               <- read.maimages(files=pData.Test$Filename, path=smplpath, source="agilent.median", green.only=T,
columns=list(G="gMedianSignal"), annotation=c("ProbeName", "GeneName"))
colnames(TEST_Data)     <- row.names(pData.Test)
TEST_RAW                <- TEST_Data$E                                       # export Expression matrix
row.names(TEST_RAW)     <- TEST_Data$genes$ProbeName                         # assign PROBE IDs as row.names
TEST_RAW                <- avereps(TEST_RAW, ID= row.names(TEST_RAW))        # collapse quadruplicate probes
TEST_RAW                <- TEST_RAW[row.names(SAGA_RAW),]                    # Expressionmatrix of Test Set with 36226 annotated probes
### Make joint sample information file #########################################################
################################################################################################
all( colnames(pData.Test) == colnames(pData) )
pData.joint <- rbind(pData,pData.Test)
matrix.joint<- cbind(SAGA_RAW,TEST_RAW)
### test samples are in black ##
if(showjoint ==1)
boxplot(log2(cbind(SAGA_RAW,TEST_RAW)),
col       = pData.joint$IVIM_Farbe,
names     = pData.joint$Filename,
boxwex    = 0.6,
cex.axis  = 0.5,
las       = 2,
outline   = FALSE,
main      = "SAGA joint data set (raw)")
library(saga)
library(saga)
library(sagadata)
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
library(saga)
library(sagadata)
library(saga)
library(sagadata)
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
################################################################################
### Or use these single functions
################################################################################
### saga_import
rawdata        <- saga_import(smplpath=samplepath, showjoint=1)
SAGA_RAW       <- rawdata$SAGA_RAW
TEST_RAW       <- rawdata$TEST_RAW
pData.joint    <- rawdata$pData.joint
pData.Test     <- rawdata$pData.Test
### normalize saga data (plotnumber=1 for normalized boxplot, 2 for tSNE plot)
normalized     <- saga_norm(SAGA_RAW, TEST_RAW, pData.joint, plotnumber=1)
qunorm.SAGA    <- normalized$qunorm.SAGA
matrix.SAGA.qn <- normalized$matrix.SAGA.qn
matrix.test.qn <- normalized$matrix.test.qn
batchnorm      <- saga_batch(matrix.SAGA.qn, matrix.test.qn, rawdata, pData.joint, plotnumber=1)
index          <- batchnorm$index
matrix.SAGA    <- batchnorm$matrix.SAGA
matrix.test    <- batchnorm$matrix.test
### Sampling and model data collection
model          <- saga_sampling(matrix.SAGA, matrix.test)
matrix.train   <- model$matrix.train
labels.train   <- model$labels.train
matrix.unknown <- model$matrix.unknown
output         <- saga_predict(samplepath, matrix.train, labels.train, matrix.unknown,
pData.Test, writeFile=1, showRoc=0)
classes        <- output$predictions
classes
### GESEA
gesea_results  <- saga_gesea(samplepath, saveResults=1)
mySAGAres      <- saga_wrapper(samplepath, showModel=0, doGESEA=1)
