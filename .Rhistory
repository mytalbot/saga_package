?saga_import
?saga_norm
?saga_batch
?saga_sampling
?saga_predict
?saga_gesea
?saga_gentargets
pkgdown::build_site()
library(saga)
remove.packages("saga", lib="~/R/win-library/3.6")
clc
clear
clc
library(saga)
devtools::install_github("mytalbot/saga_package", build_vignettes = TRUE)
browseVignettes("saga")
library(phenoTest)
library(saga)
library(sagadata)
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
################################################################################
### Or use these single functions
################################################################################
### saga_import
rawdata        <- saga_import(smplpath=samplepath, showjoint=1)
SAGA_RAW       <- rawdata$SAGA_RAW
TEST_RAW       <- rawdata$TEST_RAW
pData.joint    <- rawdata$pData.joint
pData.Test     <- rawdata$pData.Test
### normalize saga data (plotnumber=1 for normalized boxplot, 2 for tSNE plot)
normalized     <- saga_norm(SAGA_RAW, TEST_RAW, pData.joint, plotnumber=1)
qunorm.SAGA    <- normalized$qunorm.SAGA
matrix.SAGA.qn <- normalized$matrix.SAGA.qn
matrix.test.qn <- normalized$matrix.test.qn
### remove batch effects
# plotnumber = 1 (tSNE of first 2 dimensions)
# plotnumber = 2 (PCA of first 2 dimensions)
batchnorm      <- saga_batch(matrix.SAGA.qn, matrix.test.qn, rawdata, pData.joint, plotnumber=1)
index          <- batchnorm$index
matrix.SAGA    <- batchnorm$matrix.SAGA
matrix.test    <- batchnorm$matrix.test
### Sampling and model data collection
model          <- saga_sampling(matrix.SAGA, matrix.test)
matrix.train   <- model$matrix.train
labels.train   <- model$labels.train
matrix.unknown <- model$matrix.unknown
### Array predictions with optimized SVM parameters (default settings)
output         <- saga_predict(samplepath, matrix.train, labels.train, matrix.unknown,
pData.Test, writeFile=1, showRoc=1)
classes        <- output$predictions
classes
library(saga)
pkgdown::build_site()
pkgdown::build_site()
version()
version
citation("")
citation()
library(saga)
library(saga)
browseVignettes("saga")
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
library(saga)
library(saga)
pkgdown::build_site()
remove.packages("saga", lib="~/R/win-library/3.6")
devtools::install_github("mytalbot/saga_package", build_vignettes = TRUE)
library(phenoTest) # this is mandatory (for GESEA)!
library(saga)
library(sagadata)
### Path definition (Where are the sample files and the SIF?)
path           <- "C:/Users/talbotst/Desktop/tests"
mySAGAres      <- saga_wrapper(samplepath, showModel=0, doGESEA=1)
mySAGAres      <- saga_wrapper(path, showModel=0, doGESEA=1)
library(phenoTest) # this is mandatory (for GESEA)!
library(saga)
library(sagadata)
### Path definition (Where are the sample files and the SIF?)
path           <- "C:/Users/talbotst/Desktop/tests"
mySAGAres      <- saga_wrapper(path, showModel=0, doGESEA=1)
library(saga)
pkgdown::build_site()
library(phenoTest) # this is mandatory (for GESEA)!
library(saga)
library(sagadata)
### Path definition (Where are the sample files and the SIF?)
path           <- "C:/Users/talbotst/Desktop/tests"
################################################################################
### Wrapper function - all in one
################################################################################
mySAGAres      <- saga_wrapper(smplpath=path, showModel=0, doGESEA=1)
library(phenoTest) # this is mandatory (for GESEA)!
library(saga)
library(sagadata)
### Path definition (Where are the sample files and the SIF?)
path           <- "C:/Users/talbotst/Desktop/tests"
################################################################################
mySAGAres      <- saga_wrapper(smplpath=path, showModel=0, doGESEA=1)
?saga_wrapper
library(saga)
library(phenoTest) # this is mandatory (for GESEA)!
library(saga)
library(sagadata)
### Path definition (Where are the sample files and the SIF?)
path           <- "C:/Users/talbotst/Desktop/tests"
################################################################################
### Wrapper function - all in one
################################################################################
mySAGAres      <- saga_wrapper(smplpath=path, showModel=0, doGESEA=1)
remove.packages("saga", lib="~/R/win-library/3.6")
library(saga)
library(phenoTest) # this is mandatory (for GESEA)!
library(saga)
library(sagadata)
### Path definition (Where are the sample files and the SIF?)
path           <- "C:/Users/talbotst/Desktop/tests"
mySAGAres      <- saga_wrapper(smplpath=path, showModel=0, doGESEA=1)
### saga_import
rawdata        <- saga_import(smplpath=path, showjoint=1)
SAGA_RAW       <- rawdata$SAGA_RAW
TEST_RAW       <- rawdata$TEST_RAW
pData.joint    <- rawdata$pData.joint
pData.Test     <- rawdata$pData.Test
### normalize saga data (plotnumber=1 for normalized boxplot, 2 for tSNE plot)
normalized     <- saga_norm(SAGA_RAW, TEST_RAW, pData.joint, plotnumber=1)
qunorm.SAGA    <- normalized$qunorm.SAGA
matrix.SAGA.qn <- normalized$matrix.SAGA.qn
matrix.test.qn <- normalized$matrix.test.qn
### remove batch effects
# plotnumber = 1 (tSNE of first 2 dimensions)
# plotnumber = 2 (PCA of first 2 dimensions)
batchnorm      <- saga_batch(matrix.SAGA.qn, matrix.test.qn, rawdata, pData.joint, plotnumber=1)
index          <- batchnorm$index
matrix.SAGA    <- batchnorm$matrix.SAGA
matrix.test    <- batchnorm$matrix.test
### Sampling and model data collection
model          <- saga_sampling(matrix.SAGA, matrix.test)
matrix.train   <- model$matrix.train
labels.train   <- model$labels.train
matrix.unknown <- model$matrix.unknown
### Array predictions with optimized SVM parameters (default settings)
output         <- saga_predict(path, matrix.train, labels.train, matrix.unknown,
pData.Test, writeFile=1, showRoc=0)
classes        <- output$predictions
classes
### GESEA
gesea_results  <- saga_gesea(smplpath=path, saveResults=0)
library(saga)
pkgdown::build_site()
?train
library(saga)
remove.packages("saga", lib="~/R/win-library/3.6")
remove.packages("e1071", lib="~/R/win-library/3.6")
devtools::install_github("mytalbot/saga_package", build_vignettes = TRUE)
library(phenoTest)
library(saga)
library(sagadata)
# samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples2"
#samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
### saga_gentargets; automatically generates an empty (!) sample information file
# Modify manually according to your requirements
# targets        <- saga_gentargets("C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples")
################################################################################
### Wrapper function - all in one
### to use: uncomment function & execute
################################################################################
mySAGAres      <- saga_wrapper(samplepath, showModel=0, doGESEA=1)
library(saga)
library(saga)
# Initialize
library(phenoTest)
library(saga)
library(sagadata)
samplepath     <- "C:/Users/talbotst/Desktop/test"
################################################################################
### Wrapper function - all in one
### to use: uncomment function & execute
################################################################################
mySAGAres      <- saga_wrapper(samplepath, showModel=0, doGESEA=1)
library(saga)
pkgdown::build_site()
library(saga)
library(saga)
# Initialize
library(phenoTest)
library(saga)
library(sagadata)
# path to your sample data
# samplepath     <- "...path to your testfiles and sample information file (SIF)"
# samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
# samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples2"
# samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
### saga_gentargets; automatically generates an empty (!) sample information file
# Modify manually according to your requirements
# targets        <- saga_gentargets("C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples")
samplepath     <- "C:/Users/talbotst/Desktop/test"
################################################################################
### Wrapper function - all in one
### to use: uncomment function & execute
################################################################################
mySAGAres      <- saga_wrapper(samplepath, showModel=0, doGESEA=1)
# samplepath     <- "...path to your testfiles and sample information file (SIF)"
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
# samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples2"
# samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
mySAGAres      <- saga_wrapper(samplepath, showModel=0, doGESEA=1)
library(phenoTest)
library(saga)
library(sagadata)
# path to your sample data
# samplepath     <- "...path to your testfiles and sample information file (SIF)"
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
# samp
samplepath
# path to your sample data
# samplepath     <- "...path to your testfiles and sample information file (SIF)"
# samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples2"
# samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
### saga_gentargets; automatically generates an empty (!) sample information file
# Modify manually according to your requirements
# targets        <- saga_gentargets("C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples")
# samplepath     <- "C:/Users/talbotst/Desktop/test"
################################################################################
### Wrapper function - all in one
### to use: uncomment function & execute
################################################################################
mySAGAres      <- saga_wrapper(samplepath, showModel=0, doGESEA=1)
library(saga)
library(saga)
pkgdown::build_site()
remove.packages("saga", lib="~/R/win-library/3.6")
devtools::install_github("mytalbot/saga_package", build_vignettes = TRUE)
browseVignettes("saga")
library(phenoTest)
library(saga)
library(sagadata)
# path to your sample data
# samplepath     <- "...path to your testfiles and sample information file (SIF)"
# samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples2"
# samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
### saga_gentargets; automatically generates an empty (!) sample information file
# Modify manually according to your requirements
# targets        <- saga_gentargets("C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples")
# samplepath     <- "C:/Users/talbotst/Desktop/test"
################################################################################
### Wrapper function - all in one
### to use: uncomment function & execute
################################################################################
mySAGAres      <- saga_wrapper(samplepath, showModel=0, doGESEA=1)
pkgdown::build_site()
saga::sets
# CORE RFE sets
rawfile           <- paste(myrawpath, "/SAGA_INBUILD_Top11GA_GSEA.txt", sep="")
dat               <- read.delim(rawfile, header=FALSE,sep="\t",stringsAsFactors =FALSE,row.names = 1)
rownames(dat)     <- gsub("[-]",".", rownames(dat))
sets              <- dat
usethis::use_data(sets, overwrite=TRUE)
myrawpath         <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/Prepare internal data"
myroot            <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga"
setwd(myroot)
# CORE RFE sets
rawfile           <- paste(myrawpath, "/SAGA_INBUILD_Top11GA_GSEA.txt", sep="")
dat               <- read.delim(rawfile, header=FALSE,sep="\t",stringsAsFactors =FALSE,row.names = 1)
rownames(dat)     <- gsub("[-]",".", rownames(dat))
sets              <- dat
usethis::use_data(sets, overwrite=TRUE)
sets
rawfile           <- paste(myrawpath, "/SAGA_INBUILD_Top11GA_FINAL.txt", sep="")
dat               <- read.delim(rawfile,row.names=1,header=TRUE,sep="\t",stringsAsFactors =FALSE)
rownames(dat)     <- gsub("[-]",".", rownames(dat))
Top11             <- dat
usethis::use_data(Top12, overwrite=TRUE)
# top 11 GA
rawfile           <- paste(myrawpath, "/SAGA_INBUILD_Top11GA_FINAL.txt", sep="")
dat               <- read.delim(rawfile,row.names=1,header=TRUE,sep="\t",stringsAsFactors =FALSE)
rownames(dat)     <- gsub("[-]",".", rownames(dat))
Top11             <- dat
usethis::use_data(Top11, overwrite=TRUE)
library(saga)
# Initialize
library(phenoTest)
library(saga)
library(sagadata)
# path to your sample data
# samplepath     <- "...path to your testfiles and sample information file (SIF)"
# samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples2"
# samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
library(saga)
################################################################################
### Or use these single functions
################################################################################
### saga_import
rawdata        <- saga_import(smplpath=samplepath, showjoint=1)
SAGA_RAW       <- rawdata$SAGA_RAW
TEST_RAW       <- rawdata$TEST_RAW
pData.joint    <- rawdata$pData.joint
pData.Test     <- rawdata$pData.Test
### normalize saga data (plotnumber=1 for normalized boxplot, 2 for tSNE plot)
normalized     <- saga_norm(SAGA_RAW, TEST_RAW, pData.joint, plotnumber=1)
qunorm.SAGA    <- normalized$qunorm.SAGA
matrix.SAGA.qn <- normalized$matrix.SAGA.qn
matrix.test.qn <- normalized$matrix.test.qn
### remove batch effects
# plotnumber = 1 (tSNE of first 2 dimensions)
# plotnumber = 2 (PCA of first 2 dimensions)
batchnorm      <- saga_batch(matrix.SAGA.qn, matrix.test.qn, rawdata, pData.joint, plotnumber=1)
index          <- batchnorm$index
matrix.SAGA    <- batchnorm$matrix.SAGA
matrix.test    <- batchnorm$matrix.test
### Sampling and model data collection
model          <- saga_sampling(matrix.SAGA, matrix.test)
matrix.train   <- model$matrix.train
labels.train   <- model$labels.train
matrix.unknown <- model$matrix.unknown
output         <- saga_predict(samplepath, matrix.train, labels.train, matrix.unknown,
pData.Test, writeFile=1, showRoc=1)
classes        <- output$predictions
classes
gsea_results  <- saga_gsea(smplpath=samplepath, saveResults=0)
gsea_results
matrix.SAGA.qn
matrix.test
matrix.train   <- t(matrix.SAGA[row.names(Top),])
pca.train      <- prcomp(matrix.train, center = T, scale. = T)
coord.pca.test <- predict(pca.train, newdata = t(matrix.test[row.names(Top),]))
Top <- saga::Top11
matrix.train   <- t(matrix.SAGA[row.names(Top),])
pca.train      <- prcomp(matrix.train, center = T, scale. = T)
coord.pca.test <- predict(pca.train, newdata = t(matrix.test[row.names(Top),]))
coord.pca.test
plot(rbind(pca.train$x,coord.pca.test), pch=16, col=pData.joint$Design_Color, cex=1, asp=1)
legend(1,-2, legend = c("transforming","mock","neutral","new samples"), col = unique(pData.joint$Design_Color), pch=16, bty="n", cex=0.8)
text(coord.pca.test[,c(1:2)], labels=pData.Test$Filename, cex= 0.3, pos=3, offset = 0.3)
library(saga)
# Initialize
library(phenoTest)
library(saga)
library(sagadata)
# path to your sample data
# samplepath     <- "...path to your testfiles and sample information file (SIF)"
# samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples2"
# samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
### saga_gentargets; automatically generates an empty (!) sample information file
# Modify manually according to your requirements
# targets        <- saga_gentargets("C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples")
# samplepath     <- "C:/Users/talbotst/Desktop/test"
################################################################################
### Wrapper function - all in one
### to use: uncomment function & execute
################################################################################
mySAGAres      <- saga_wrapper(samplepath, showModel=0, doGSEA=1)
################################################################################
### Or use these single functions
################################################################################
### saga_import
rawdata        <- saga_import(smplpath=samplepath, showjoint=1)
SAGA_RAW       <- rawdata$SAGA_RAW
TEST_RAW       <- rawdata$TEST_RAW
pData.joint    <- rawdata$pData.joint
pData.Test     <- rawdata$pData.Test
### normalize saga data (plotnumber=1 for normalized boxplot, 2 for tSNE plot)
normalized     <- saga_norm(SAGA_RAW, TEST_RAW, pData.joint, plotnumber=1)
qunorm.SAGA    <- normalized$qunorm.SAGA
matrix.SAGA.qn <- normalized$matrix.SAGA.qn
matrix.test.qn <- normalized$matrix.test.qn
### remove batch effects
# plotnumber = 1 (tSNE of first 2 dimensions)
# plotnumber = 2 (PCA of first 2 dimensions)
batchnorm      <- saga_batch(matrix.SAGA.qn, matrix.test.qn, rawdata, pData.joint, plotnumber=1)
batchnorm      <- saga_batch(matrix.SAGA.qn, matrix.test.qn, rawdata, pData.joint, plotnumber=2)
library(saga)
batchnorm      <- saga_batch(matrix.SAGA.qn, matrix.test.qn, rawdata, pData.joint, plotnumber=2)
plot(tsne_out$Y,
col  = pData.joint$IVIM_Farbe,
pch  = 16,
cex  = 1.3,
main = "t-SNE Plot",
xlab = "Dimension 1",
ylab = "Dimension 2")
set.seed(12)
tsne_out     <- Rtsne(t(cbind(matrix.SAGA,matrix.test)),dims = 2, perplexity = 16,
theta = 0.5, check_duplicates = FALSE, pca = TRUE, max_iter = 1000,
verbose = FALSE, is_distance = FALSE)
library(Rtsne)
set.seed(12)
tsne_out     <- Rtsne(t(cbind(matrix.SAGA,matrix.test)),dims = 2, perplexity = 16,
theta = 0.5, check_duplicates = FALSE, pca = TRUE, max_iter = 1000,
verbose = FALSE, is_distance = FALSE)
matrix.SAGA  <- t(combat.SAGA$xadj)
= 2 (PCA of first 2 dimensions)
batchnorm      <- saga_batch(matrix.SAGA.qn, matrix.test.qn, rawdata, pData.joint, plotnumber=1)
batchnorm      <- saga_batch(matrix.SAGA.qn, matrix.test.qn, rawdata, pData.joint, plotnumber=2)
library(saga)
library(saga)
batchnorm      <- saga_batch(matrix.SAGA.qn, matrix.test.qn, rawdata, pData.joint, plotnumber=1)
batchnorm      <- saga_batch(matrix.SAGA.qn, matrix.test.qn, rawdata, pData.joint, plotnumber=2)
index          <- batchnorm$index
matrix.SAGA    <- batchnorm$matrix.SAGA
matrix.test    <- batchnorm$matrix.test
### Sampling and model data collection
model          <- saga_sampling(matrix.SAGA, matrix.test)
matrix.train   <- model$matrix.train
labels.train   <- model$labels.train
matrix.unknown <- model$matrix.unknown
output         <- saga_predict(samplepath, matrix.train, labels.train, matrix.unknown,
pData.Test, writeFile=1, showRoc=1)
classes        <- output$predictions
classes
library(saga)
# Initialize
library(phenoTest)
library(saga)
library(sagadata)
# path to your sample data
# samplepath     <- "...path to your testfiles and sample information file (SIF)"
# samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples2"
# samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
### saga_gentargets; automatically generates an empty (!) sample information file
# Modify manually according to your requirements
# targets        <- saga_gentargets("C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples")
# samplepath     <- "C:/Users/talbotst/Desktop/test"
################################################################################
### Wrapper function - all in one
### to use: uncomment function & execute
################################################################################
mySAGAres      <- saga_wrapper(samplepath, showModel=0, doGSEA=1)
################################################################################
### Or use these single functions
################################################################################
### saga_import
rawdata        <- saga_import(smplpath=samplepath, showjoint=1)
SAGA_RAW       <- rawdata$SAGA_RAW
TEST_RAW       <- rawdata$TEST_RAW
pData.joint    <- rawdata$pData.joint
pData.Test     <- rawdata$pData.Test
### normalize saga data (plotnumber=1 for normalized boxplot, 2 for tSNE plot)
normalized     <- saga_norm(SAGA_RAW, TEST_RAW, pData.joint, plotnumber=1)
qunorm.SAGA    <- normalized$qunorm.SAGA
matrix.SAGA.qn <- normalized$matrix.SAGA.qn
matrix.test.qn <- normalized$matrix.test.qn
### remove batch effects
# plotnumber = 1 (tSNE of first 2 dimensions)
# plotnumber = 2 (PCA of first 2 dimensions)
batchnorm      <- saga_batch(matrix.SAGA.qn, matrix.test.qn, rawdata, pData.joint, plotnumber=2)
library(saga)
library(phenoTest)
library(saga)
library(sagadata)
# path to your sample data
# samplepath     <- "...path to your testfiles and sample information file (SIF)"
# samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples2"
# samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
### saga_gentargets; automatically generates an empty (!) sample information file
# Modify manually according to your requirements
# targets        <- saga_gentargets("C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples")
# samplepath     <- "C:/Users/talbotst/Desktop/test"
################################################################################
### Wrapper function - all in one
### to use: uncomment function & execute
################################################################################
mySAGAres      <- saga_wrapper(samplepath, showModel=2, doGSEA=1)
library(saga)
library(phenoTest)
library(saga)
library(sagadata)
# path to your sample data
# samplepath     <- "...path to your testfiles and sample information file (SIF)"
# samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples2"
# samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
### saga_gentargets; automatically generates an empty (!) sample information file
# Modify manually according to your requirements
# targets        <- saga_gentargets("C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples")
# samplepath     <- "C:/Users/talbotst/Desktop/test"
################################################################################
### Wrapper function - all in one
### to use: uncomment function & execute
################################################################################
mySAGAres      <- saga_wrapper(samplepath, showModel=2, doGSEA=1)
library(saga)
library(phenoTest)
library(saga)
library(sagadata)
# path to your sample data
# samplepath     <- "...path to your testfiles and sample information file (SIF)"
# samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples2"
# samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
### saga_gentargets; automatically generates an empty (!) sample information file
# Modify manually according to your requirements
# targets        <- saga_gentargets("C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples")
# samplepath     <- "C:/Users/talbotst/Desktop/test"
################################################################################
### Wrapper function - all in one
### to use: uncomment function & execute
################################################################################
mySAGAres      <- saga_wrapper(samplepath, showModel=2, doGSEA=1)
mySAGAres      <- saga_wrapper(samplepath, showModel=1, doGSEA=0)
library(saga)
pkgdown::build_site()
pkgdown::build_site()
library(saga)
