result            <- summary(SAGA.GSEA)[,c(1,2,3,5,8)]                     # extract results (only NES- normalized enrichment scores)
# result$pred.class <- ifelse(result$nes>0,"transforming","nontransforming") # prediction based on NES
result$pred.class <- NA
for(e in 1:dim(result)[1]){
if(result$nes[e]>=2){
result$pred.class[e] <- "strong enrichment (likely genotoxic)"
} else if (result$nes[e]>=0.9 & result$nes[e]<2){
result$pred.class[e] <- "weak enrichment (potentially genotoxic)"
} else if (result$nes[e]<0.9){
result$pred.class[e] <- "no enrichment (potentially safe)"
}
}
#### 2.6 output ###############################################################################
Group <- NULL    ### pull out the Group index number from the result table
for (a in 1:nrow(result)) {Group[a] <- unlist(strsplit(as.character(result$variable[a]), ".", fixed = TRUE))[2] }
result$Group     <- Group
SIF.sub           <- SIF.i[SIF.i$Group != 1, c(3,4,1) ]                     # pull out info of tested Groups
SIF.sub$SampleID  <- row.names(SIF.sub)
result.m          <- merge(SIF.sub,result, by.x="Group", by.y = "Group") # merge result with SIF for SampleIDs and FileNames
plot(SAGA.GSEA,es.nes='nes',selGsets='SAGA.CORE')
if(saveResults==1){
write.table(result.m, file = paste(smplpath, "/result_SAGA.GSEA_Batch_",i,".txt",sep = ""), sep="\t",row.names = FALSE)
pdf(file=paste(smplpath, "/result_SAGA.GSEA_Batch_",i,".pdf",sep = ""), useDingbats = F, width = 11, height = 10)
grid.table(result.m,rows = NULL)
par(col.main="#00000000")
plot(SAGA.GSEA,es.nes='nes', selGsets='SAGA.CORE' )
mytext         <- paste("NES plot / ", result.m$Vector,":Group=",result.m$Group, " signature:SAGA:CORE ",
"(fdr<", round(result.m$fdr,3),")", sep="")
mtext(mytext[i], side = 3, line=3)
dev.off()
}else{}
}
mytext         <- paste("NES plot / ", result.m$Vector,":Group=",result.m$Group, " signature:SAGA:CORE ",
"(fdr<", round(result.m$fdr,3),")", sep="")
pdf(file=paste(smplpath, "/result_SAGA.GSEA_Batch_",i,".pdf",sep = ""), useDingbats = F, width = 11, height = 10)
grid.table(result.m,rows = NULL)
par(col.main="#00000000")
plot(SAGA.GSEA,es.nes='nes', selGsets='SAGA.CORE' )
mtext(mytext[i], side = 3, line=3)
dev.off()
i
mytext
class(mytext)
as.data.frame(mytext)
mytext         <- as.data.frame( paste("NES plot / ", result.m$Vector,":Group=",result.m$Group, " signature:SAGA:CORE ",
"(fdr<", round(result.m$fdr,3),")", sep="") )
pdf(file=paste(smplpath, "/result_SAGA.GSEA_Batch_",i,".pdf",sep = ""), useDingbats = F, width = 11, height = 10)
grid.table(result.m,rows = NULL)
par(col.main="#00000000")
plot(SAGA.GSEA,es.nes='nes', selGsets='SAGA.CORE' )
mtext(mytext, side = 3, line=3)
dev.off()
mytext
paste("NES plot / ", result.m$Vector,":Group=",result.m$Group, " signature:SAGA:CORE ",
"(fdr<", round(result.m$fdr,3),")", sep="")
mytext         <- rbind( paste("NES plot / ", result.m$Vector,":Group=",result.m$Group, " signature:SAGA:CORE ",
"(fdr<", round(result.m$fdr,3),")", sep="") )
mytext
cbind( paste("NES plot / ", result.m$Vector,":Group=",result.m$Group, " signature:SAGA:CORE ",
"(fdr<", round(result.m$fdr,3),")", sep="") )
mytext         <- cbind( paste("NES plot / ", result.m$Vector,":Group=",result.m$Group, " signature:SAGA:CORE ",
"(fdr<", round(result.m$fdr,3),")", sep="") )
pdf(file=paste(smplpath, "/result_SAGA.GSEA_Batch_",i,".pdf",sep = ""), useDingbats = F, width = 11, height = 10)
grid.table(result.m,rows = NULL)
par(col.main="#00000000")
plot(SAGA.GSEA,es.nes='nes', selGsets='SAGA.CORE' )
mtext(mytext, side = 3, line=3)
dev.off()
mytext[1]
mytext[2]
mytext         <- cbind( paste("NES plot / ", result.m$Vector,":Group=",result.m$Group, " signature:SAGA:CORE ",
"(fdr<", round(result.m$fdr,3),")", sep="") )
pdf(file=paste(smplpath, "/result_SAGA.GSEA_Batch_",i,".pdf",sep = ""), useDingbats = F, width = 11, height = 10)
grid.table(result.m,rows = NULL)
par(col.main="#00000000")
plot(SAGA.GSEA,es.nes='nes', selGsets='SAGA.CORE' )
mtext(mytext[i], side = 3, line=3)
dev.off()
plot(SAGA.GSEA,es.nes='nes', selGsets='SAGA.CORE' )
SAGA.GSEA[[1]]
getNES(SAGA.GSEA)
getEs(SAGA.GSEA)
SAGA.GSEA
summary(SAGA.GSEA)
summary(SAGA.GSEA)$variable <- NA
summary(SAGA.GSEA)<-NA
summary(GESEA)
summary(SAGA.GSEA)<-NA
summary(SAGA.GSEA)
summary(SAGA.GSEA)$variable
class(summary(SAGA.GSEA)$variable)
summary(SAGA.GSEA)$variable[1]
summary(SAGA.GSEA)$variable[1] <- NA
i
pdf(file=paste(smplpath, "/result_SAGA.GSEA_Batch_",i,".pdf",sep = ""), useDingbats = F, width = 11, height = 10)
grid.table(result.m,rows = NULL)
par(col.main="#00000000")
plot(SAGA.GSEA,es.nes='nes', selGsets='SAGA.CORE' )
mtext(mytext[i], side = 3, line=3)
dev.off()
SAGA.GSEA
SAGA.GSEA
SAGA.GSEA@gseaSignatures
SAGA.GSEA@gseaSignatures
SAGA.GSEA
SAGA.GSEA[[1]]
what(SAGA.GSEA)
class(SAGA.GSEA, what)
SAGA.GSEA
Group
SAGA.CORE
SAGA.GSEA
epheno.gsea
result
summary(SAGA.GSEA)[,c(1,2,3,5,8)]
summary(SAGA.GSEA)
SAGA.GSEA
result
result.m
SIF.sub
#### 2.5 GSEA #################################################################################
SAGA.GSEA <- gsea(x=epheno.gsea, gsets=SAGA.CORE ,B=2000,                  # calculate GSEA-scores based on the FC in the epheno object
center = TRUE, test = "perm", p.adjust.method='BH')
result            <- summary(SAGA.GSEA)[,c(1,2,3,5,8)]                     # extract results (only NES- normalized enrichment scores)
# result$pred.class <- ifelse(result$nes>0,"transforming","nontransforming") # prediction based on NES
result$pred.class <- NA
for(e in 1:dim(result)[1]){
if(result$nes[e]>=2){
result$pred.class[e] <- "strong enrichment (likely genotoxic)"
} else if (result$nes[e]>=0.9 & result$nes[e]<2){
result$pred.class[e] <- "weak enrichment (potentially genotoxic)"
} else if (result$nes[e]<0.9){
result$pred.class[e] <- "no enrichment (potentially safe)"
}
}
result
result
#### 2.6 output ###############################################################################
Group <- NULL    ### pull out the Group index number from the result table
for (a in 1:nrow(result)) {Group[a] <- unlist(strsplit(as.character(result$variable[a]), ".", fixed = TRUE))[2] }
result$Group     <- Group
SIF.sub           <- SIF.i[SIF.i$Group != 1, c(3,4,1) ]                     # pull out info of tested Groups
SIF.sub$SampleID  <- row.names(SIF.sub)
result.m          <- merge(SIF.sub,result, by.x="Group", by.y = "Group") # merge result with SIF for SampleIDs and FileNames
plot(SAGA.GSEA,es.nes='nes',selGsets='SAGA.CORE')
SAGA.GSEA
plot(SAGA.GSEA,es.nes='nes',selGsets='SAGA.CORE', selVars="Test")
plot(SAGA.GSEA,es.nes='nes',selGsets='SAGA.CORE', selVars="Group.2.fc")
plot(SAGA.GSEA,es.nes='nes',selGsets='SAGA.CORE', selVars="Group.3.fc")
plot(SAGA.GSEA,es.nes='nes',selGsets='SAGA.CORE', selVars="Group.3.fc")
plot(SAGA.GSEA,es.nes='nes',selGsets='SAGA.CORE', selVars="Group.2.fc")
SAGA.CORE
epheno.gsea
SAGA.GSEA <- gsea(x=epheno.gsea, gsets=SAGA.CORE ,B=2000,                  # calculate GSEA-scores based on the FC in the epheno object
center = TRUE, test = "perm", p.adjust.method='BH')
SAGA.GSEA
SAGA.GSEA
unlist(SAGA.GSEA)
signature(SAGA.GSEA = "gseaData")
showClass("SAGA.GSEA")
grid.table(result.m,rows = NULL)
par(col.main="#00000000")
plot(SAGA.GSEA,es.nes='nes', selGsets='SAGA.CORE' )
mtext(mytext[i], side = 3, line=3)
SAGA.GSEA
str(SAGA.GSEA)
SAGA.GSEA@Data
SAGA.GSEA[[1]]
SAGA.GSEA[2]
SAGA.GSEA[2]@variables
SAGA.GSEA[2]$significance
SAGA.GSEA[[1]]
SAGA.GSEA[[1]][1]
SAGA.GSEA[[1]][2]
SAGA.GSEA[[1]][1]
SAGA.GSEA[[1]][1]<-NA
saga_gesea()
SAGA.GSEA
SAGA.GSEA[[1]][1]
name(SAGA.GSEA[[1]][1])<-"Test"
names(SAGA.GSEA[[1]][1])
names(SAGA.GSEA[[1]][1]) <- "test"
saga_gesea()
SAGA.GSEA
#### 2.5 GSEA #################################################################################
SAGA.GSEA <- gsea(x=epheno.gsea, gsets=SAGA.CORE ,B=2000,                  # calculate GSEA-scores based on the FC in the epheno object
center = TRUE, test = "perm", p.adjust.method='BH')
result            <- summary(SAGA.GSEA)[,c(1,2,3,5,8)]                     # extract results (only NES- normalized enrichment scores)
# result$pred.class <- ifelse(result$nes>0,"transforming","nontransforming") # prediction based on NES
result$pred.class <- NA
for(e in 1:dim(result)[1]){
if(result$nes[e]>=2){
result$pred.class[e] <- "strong enrichment (likely genotoxic)"
} else if (result$nes[e]>=0.9 & result$nes[e]<2){
result$pred.class[e] <- "weak enrichment (potentially genotoxic)"
} else if (result$nes[e]<0.9){
result$pred.class[e] <- "no enrichment (potentially safe)"
}
}
SAGA.GSEA
SAGA.GSEA[[1]][1]
SAGA.GSEA[[1]][2]
SAGA.GSEA[[2]][1]
SAGA.GSEA[[2]]
SAGA.GSEA[[1]]
names(SAGA.GSEA[[1]][1]) <- "test"
SAGA.GSEA
names(SAGA.GSEA[[1]][1]) <- "test"
SAGA.GSEA
names(SAGA.GSEA[[1]][1])
names(SAGA.GSEA[[1]] ) <- "test"
SAGA.GSEA
SAGA.GSEA
names(SAGA.GSEA[[1]] ) <- c("test","bla bla")
SAGA.GSEA
paste(result.m$Vector,":Group=",result.m$Group, sep="")
names(SAGA.GSEA[[1]] ) <- paste(result.m$Vector,":Group=",result.m$Group, sep="")
SAGA.GSEA
pdf(file=paste(smplpath, "/result_SAGA.GSEA_Batch_",i,".pdf",sep = ""), useDingbats = F, width = 11, height = 10)
grid.table(result.m,rows = NULL)
par(col.main="#00000000")
plot(SAGA.GSEA,es.nes='nes', selGsets='SAGA.CORE' )
mtext(mytext[i], side = 3, line=3)
dev.off()
SAGA.GSEA[[1]]
SAGA.GSEA[[2]]
names(SAGA.GSEA[[1]] ) <- paste(result.m$Vector,":Group=",result.m$Group, sep="")
names(SAGA.GSEA[[2]] ) <- paste(result.m$Vector,":Group=",result.m$Group, sep="")
pdf(file=paste(smplpath, "/result_SAGA.GSEA_Batch_",i,".pdf",sep = ""), useDingbats = F, width = 11, height = 10)
grid.table(result.m,rows = NULL)
par(col.main="#00000000")
plot(SAGA.GSEA,es.nes='nes', selGsets='SAGA.CORE' )
mtext(mytext[i], side = 3, line=3)
dev.off()
plot(SAGA.GSEA,es.nes='nes', selGsets='SAGA.CORE' )
mtext(mytext[i], side = 3, line=1)
names(SAGA.GSEA[[1]] ) <- paste(result.m$Vector,":Group=",result.m$Group, sep="")
names(SAGA.GSEA[[2]] ) <- paste(result.m$Vector,":Group=",result.m$Group, sep="")
pdf(file=paste(smplpath, "/result_SAGA.GSEA_Batch_",i,".pdf",sep = ""), useDingbats = F, width = 11, height = 10)
grid.table(result.m,rows = NULL)
# par(col.main="#00000000")
plot(SAGA.GSEA,es.nes='nes', selGsets='SAGA.CORE' )
# mtext(mytext[i], side = 3, line=1)
dev.off()
dim(SAGA.GSEA)
names(SAGA.GSEA)
names(SAGA.GSEA[[3]])
names(SAGA.GSEA[[2]])
result.m
for(r in 1:dim(result.m)[1]){
names(SAGA.GSEA[[r]] ) <- paste(result.m$Vector,":Group=",result.m$Group, sep="")
}
SAGA.GSEA
library(saga)
samplepath     <- "C:/MHH Bleich/Rothe/SAGA/saga_samples" # path to somewhere useful (where all the samples are)"
smplpath<- samplepath
sets        <- saga::sets
SAGA.CORE   <- setNames(split(sets, seq(nrow(sets))), rownames(sets))   # GeneSets have to be stored in a list object
SIF         <- read.delim(paste(smplpath,"/SampleInformation.txt",sep=""),row.names=1,header=TRUE,sep="\t", stringsAsFactors = F) # Sample Information File for phenoTest
### 1.1. Read in files from test and loop over all batches separately from here on ##############
#################################################################################################
maxBatch   <- max(as.integer(SIF$Batch))   # how many assays / batches
for(i in 1:maxBatch) {
SIF.i <- SIF[SIF$Batch==i,]
RAW.i <- limma::read.maimages(files=SIF.i$Filename, path=smplpath, source="agilent.median", green.only=T,
columns=list(G="gMedianSignal"), annotation=c("ProbeName", "GeneName"))
colnames(RAW.i) <- row.names(SIF.i)
#### 2.1. Normalize, average ###################################################################
RMA.i       <- limma::normalizeBetweenArrays(RAW.i, method="quantile")  # quantil normalize
RMA.i       <- limma::avereps(RMA.i,ID= RMA.i$genes$ProbeName)          # average replicates to one value for each probe
matrix.gsea <- RMA.i$E                                           # extract log2 expression values
#### 2.3. make ExpressionSet (Biobase) object ##################################################
metadata    <- data.frame(labelDescription= rep(NA,dim(SIF.i)[2]),row.names=colnames(SIF.i))   # varMetadata: empty, but required
phenoData   <- new("AnnotatedDataFrame",data=SIF.i, varMetadata=metadata)     # annotatedDataFrame for the annotation of the samples
eset.gsea   <- Biobase::ExpressionSet(assayData = matrix.gsea, phenoData = phenoData)  # this is the ExpressionSet required for phenoTest
#### 2.4. make ePheno object: contains the FCs associated with Group variable ##################
vars2test   <- list(ordinal="Group")    # Variables (here: Groups) to test against MOCK, which are always Group = 1 in the SIF
epheno.gsea <- phenoTest::ExpressionPhenoTest(eset.gsea,vars2test,p.adjust.method='BH')
#### 2.5 GSEA #################################################################################
SAGA.GSEA <- gsea(x=epheno.gsea, gsets=SAGA.CORE ,B=2000,                  # calculate GSEA-scores based on the FC in the epheno object
center = TRUE, test = "perm", p.adjust.method='BH')
result            <- summary(SAGA.GSEA)[,c(1,2,3,5,8)]                     # extract results (only NES- normalized enrichment scores)
# result$pred.class <- ifelse(result$nes>0,"transforming","nontransforming") # prediction based on NES
result$pred.class <- NA
for(e in 1:dim(result)[1]){
if(result$nes[e]>=2){
result$pred.class[e] <- "strong enrichment (likely genotoxic)"
} else if (result$nes[e]>=0.9 & result$nes[e]<2){
result$pred.class[e] <- "weak enrichment (potentially genotoxic)"
} else if (result$nes[e]<0.9){
result$pred.class[e] <- "no enrichment (potentially safe)"
}
}
#### 2.6 output ###############################################################################
Group <- NULL    ### pull out the Group index number from the result table
for (a in 1:nrow(result)) {Group[a] <- unlist(strsplit(as.character(result$variable[a]), ".", fixed = TRUE))[2] }
result$Group     <- Group
SIF.sub           <- SIF.i[SIF.i$Group != 1, c(3,4,1) ]                     # pull out info of tested Groups
SIF.sub$SampleID  <- row.names(SIF.sub)
result.m          <- merge(SIF.sub,result, by.x="Group", by.y = "Group") # merge result with SIF for SampleIDs and FileNames
plot(SAGA.GSEA,es.nes='nes',selGsets='SAGA.CORE')
if(saveResults==1){
write.table(result.m, file = paste(smplpath, "/result_SAGA.GSEA_Batch_",i,".txt",sep = ""), sep="\t",row.names = FALSE)
#mytext         <- cbind( paste("NES plot / ", result.m$Vector,":Group=",result.m$Group, " signature:SAGA:CORE ",
#                                       "(fdr<", round(result.m$fdr,3),")", sep="") )
for(r in 1:dim(result.m)[1]){
names(SAGA.GSEA[[r]] ) <- paste(result.m$Vector,":Group=",result.m$Group, sep="")
}
pdf(file=paste(smplpath, "/result_SAGA.GSEA_Batch_",i,".pdf",sep = ""), useDingbats = F, width = 11, height = 10)
grid.table(result.m,rows = NULL)
# par(col.main="#00000000")
plot(SAGA.GSEA,es.nes='nes', selGsets='SAGA.CORE' )
# mtext(mytext[i], side = 3, line=1)
dev.off()
}else{}
}
saveResults=1
sets        <- saga::sets
SAGA.CORE   <- setNames(split(sets, seq(nrow(sets))), rownames(sets))   # GeneSets have to be stored in a list object
SIF         <- read.delim(paste(smplpath,"/SampleInformation.txt",sep=""),row.names=1,header=TRUE,sep="\t", stringsAsFactors = F) # Sample Information File for phenoTest
### 1.1. Read in files from test and loop over all batches separately from here on ##############
#################################################################################################
maxBatch   <- max(as.integer(SIF$Batch))   # how many assays / batches
for(i in 1:maxBatch) {
SIF.i <- SIF[SIF$Batch==i,]
RAW.i <- limma::read.maimages(files=SIF.i$Filename, path=smplpath, source="agilent.median", green.only=T,
columns=list(G="gMedianSignal"), annotation=c("ProbeName", "GeneName"))
colnames(RAW.i) <- row.names(SIF.i)
#### 2.1. Normalize, average ###################################################################
RMA.i       <- limma::normalizeBetweenArrays(RAW.i, method="quantile")  # quantil normalize
RMA.i       <- limma::avereps(RMA.i,ID= RMA.i$genes$ProbeName)          # average replicates to one value for each probe
matrix.gsea <- RMA.i$E                                           # extract log2 expression values
#### 2.3. make ExpressionSet (Biobase) object ##################################################
metadata    <- data.frame(labelDescription= rep(NA,dim(SIF.i)[2]),row.names=colnames(SIF.i))   # varMetadata: empty, but required
phenoData   <- new("AnnotatedDataFrame",data=SIF.i, varMetadata=metadata)     # annotatedDataFrame for the annotation of the samples
eset.gsea   <- Biobase::ExpressionSet(assayData = matrix.gsea, phenoData = phenoData)  # this is the ExpressionSet required for phenoTest
#### 2.4. make ePheno object: contains the FCs associated with Group variable ##################
vars2test   <- list(ordinal="Group")    # Variables (here: Groups) to test against MOCK, which are always Group = 1 in the SIF
epheno.gsea <- phenoTest::ExpressionPhenoTest(eset.gsea,vars2test,p.adjust.method='BH')
#### 2.5 GSEA #################################################################################
SAGA.GSEA <- gsea(x=epheno.gsea, gsets=SAGA.CORE ,B=2000,                  # calculate GSEA-scores based on the FC in the epheno object
center = TRUE, test = "perm", p.adjust.method='BH')
result            <- summary(SAGA.GSEA)[,c(1,2,3,5,8)]                     # extract results (only NES- normalized enrichment scores)
# result$pred.class <- ifelse(result$nes>0,"transforming","nontransforming") # prediction based on NES
result$pred.class <- NA
for(e in 1:dim(result)[1]){
if(result$nes[e]>=2){
result$pred.class[e] <- "strong enrichment (likely genotoxic)"
} else if (result$nes[e]>=0.9 & result$nes[e]<2){
result$pred.class[e] <- "weak enrichment (potentially genotoxic)"
} else if (result$nes[e]<0.9){
result$pred.class[e] <- "no enrichment (potentially safe)"
}
}
#### 2.6 output ###############################################################################
Group <- NULL    ### pull out the Group index number from the result table
for (a in 1:nrow(result)) {Group[a] <- unlist(strsplit(as.character(result$variable[a]), ".", fixed = TRUE))[2] }
result$Group     <- Group
SIF.sub           <- SIF.i[SIF.i$Group != 1, c(3,4,1) ]                     # pull out info of tested Groups
SIF.sub$SampleID  <- row.names(SIF.sub)
result.m          <- merge(SIF.sub,result, by.x="Group", by.y = "Group") # merge result with SIF for SampleIDs and FileNames
plot(SAGA.GSEA,es.nes='nes',selGsets='SAGA.CORE')
if(saveResults==1){
write.table(result.m, file = paste(smplpath, "/result_SAGA.GSEA_Batch_",i,".txt",sep = ""), sep="\t",row.names = FALSE)
#mytext         <- cbind( paste("NES plot / ", result.m$Vector,":Group=",result.m$Group, " signature:SAGA:CORE ",
#                                       "(fdr<", round(result.m$fdr,3),")", sep="") )
for(r in 1:dim(result.m)[1]){
names(SAGA.GSEA[[r]] ) <- paste(result.m$Vector,":Group=",result.m$Group, sep="")
}
pdf(file=paste(smplpath, "/result_SAGA.GSEA_Batch_",i,".pdf",sep = ""), useDingbats = F, width = 11, height = 10)
grid.table(result.m,rows = NULL)
# par(col.main="#00000000")
plot(SAGA.GSEA,es.nes='nes', selGsets='SAGA.CORE' )
# mtext(mytext[i], side = 3, line=1)
dev.off()
}else{}
}
paste(result.m$Vector,"(Group=",result.m$Group,")", sep="")
paste(result.m$Vector," (Group=",result.m$Group,")", sep="")
devtools::build_vignettes(pkg = ".", dependencies = "VignetteBuilder",
clean = TRUE, upgrade = "never", quiet = TRUE, install = TRUE,
keep_md = TRUE)
devtools::install(pkg = ".", build_vignettes = TRUE)
library(saga)
vignette("saga_vignette")
library(saga)
help(package = "saga", help_type = "html")
# to see the vignette
vignette("saga_vignette")
###################################
library(saga)
samplepath     <- "C:/MHH Bleich/Rothe/SAGA/saga_samples" # path to somewhere useful (where all the samples are)"
### saga_gentargets; automatically generates an empty (!) sample information file
# Modify manually according to your requirements
#targets        <- saga_gentargets(samplepath)
################################################################################
### Wrapper function - all in one
### to use: uncomment function & execute
################################################################################
mySAGAres      <- saga_wrapper(samplepath, showModel=0, doGESEA=1)
getwd()
dir
ls
ls()
dir()
git init
library(saga)
git remote add origin https://github.com/username/reponame
remove.packages("saga", lib="~/R/win-library/3.5")
library(saaga)
library(saga)
saga
saga_batch
devtools::install_github("mytalbot/saga_package")
devtools::install_github("mytalbot/saga_package")
library(saga)
samplepath     <- "C:/MHH Bleich/Rothe/SAGA/saga_samples"
################################################################################
### Or use these single functions
################################################################################
### saga_import
rawdata        <- saga_import(samplepath, showjoint=1)
library(saga)
samplepath     <- "C:/MHH Bleich/Rothe/SAGA/saga_samples"
################################################################################
### Wrapper function - all in one
### to use: uncomment function & execute
################################################################################
mySAGAres      <- saga_wrapper(samplepath, showModel=0, doGESEA=1)
remove.packages("saga", lib="~/R/win-library/3.5")
library(saga)
samplepath     <- "C:/MHH Bleich/Rothe/SAGA/saga_samples"
### saga_gentargets; automatically generates an empty (!) sample information file
# Modify manually according to your requirements
#targets        <- saga_gentargets(samplepath)
################################################################################
### Wrapper function - all in one
### to use: uncomment function & execute
################################################################################
mySAGAres      <- saga_wrapper(samplepath, showModel=0, doGESEA=1)
devtools::install_github("mytalbot/saga_package")
install.packages("Rtools")
library("devtools", lib.loc="~/R/win-library/3.5")
install.packages("devtools")
remove.packages("saga", lib="~/R/win-library/3.5")
devtools::install_github("mytalbot/saga_package")
library(saga)
samplepath     <- "C:/MHH Bleich/Rothe/SAGA/saga_samples"
################################################################################
### Or use these single functions
################################################################################
### saga_import
rawdata        <- saga_import(samplepath, showjoint=1)
help(package = "saga", help_type = "html")
vignette("saga_vignette")
devtools::build_vignettes(pkg = ".", dependencies = "VignetteBuilder",
clean = TRUE, upgrade = "never", quiet = TRUE, install = TRUE,
keep_md = TRUE)
devtools::install(pkg = ".", build_vignettes = TRUE)
library(saga)
vignette("saga_vignette")
library(saga)
library(saga)
vignette("saga_vignette")
devtools::build_vignettes(pkg = ".", dependencies = "VignetteBuilder",
clean = TRUE, upgrade = "never", quiet = TRUE, install = TRUE,
keep_md = TRUE)
remove.packages("saga", lib="~/R/win-library/3.5")
devtools::install_github("mytalbot/saga_package",  build_vignettes = TRUE)
library(saga)
library(saga)
vignette("saga_vignette")
remove.packages("saga", lib="~/R/win-library/3.5")
devtools::install_github("mytalbot/saga_package", build_vignettes = TRUE)
library(saga)
vignette("saga_vignette")
help(package = "saga", help_type = "html")
vignette(package = "saga")
devtools::install(pkg = ".", build_vignettes = TRUE)
vignette("saga_vignette")
remove.packages("saga", lib="~/R/win-library/3.5")
library(saga)
samplepath     <- "C:/MHH Bleich/Rothe/SAGA/saga_samples"
rawdata        <- saga_import(samplepath, showjoint=1)
devtools::install_github("mytalbot/saga_package")
# to see the vignette
vignette("saga_vignette")
devtools::build_vignettes(pkg = "saga", dependencies = "VignetteBuilder")
getwd()
library(saga)
samplepath     <- "C:/MHH Bleich/Rothe/SAGA/saga_samples"
vignette("saga_vignette")
devtools::build_vignettes(pkg = "saga", dependencies = "VignetteBuilder")
devtools::build_vignettes(pkg = ".", dependencies = "VignetteBuilder")
vignette("saga_vignette")
library(saga)
vignette("saga_vignette")
devtools::build_vignettes(pkg = ".", dependencies = "VignetteBuilder",
clean = TRUE, upgrade = "never", quiet = TRUE, install = TRUE,
keep_md = TRUE)
vignette("saga_vignette")
library(saga)
vignette("saga_vignette")
library(saga)
samplepath     <- "C:/MHH Bleich/Rothe/SAGA/saga_samples"
### saga_gentargets; automatically generates an empty (!) sample informat
################################################################################
### Or use these single functions
################################################################################
### saga_import
rawdata        <- saga_import(samplepath, showjoint=1)
vignette('saga_vignette', package = 'saga')
