SIF                     <- read.delim("SampleInformation.txt",row.names=1,header=TRUE,sep="\t", stringsAsFactors = F) # Sample Information File for phenoTest
pData.Test              <- read.delim("SampleInformation.txt",row.names=1,header=TRUE,sep="\t", stringsAsFactors = F) # Sample Information File for SAGA-SVM
pData.Test$Batch        <- pData.Test$Batch + 11              # 11 Batches are already in the SAGA Inbuild DataSet
pData.Test$IVIM_Color   <- rep("#000000", nrow(pData.Test))   # new samples are black
pData.Test$Design_Color <- rep("#000000", nrow(pData.Test))
pData.Test$IVIM_ID      <- rep(NA, nrow(pData.Test))
pData.Test$IVIM_Farbe   <- rep("#000000", nrow(pData.Test))
TEST_Data               <- read.maimages(files=pData.Test$Filename, path=".", source="agilent.median", green.only=T,
columns=list(G="gMedianSignal"), annotation=c("ProbeName", "GeneName"))
colnames(TEST_Data)     <- row.names(pData.Test)
TEST_RAW                <- TEST_Data$E                                       # export Expression matrix
row.names(TEST_RAW)     <- TEST_Data$genes$ProbeName                         # assign PROBE IDs as row.names
TEST_RAW                <- avereps(TEST_RAW, ID= row.names(TEST_RAW))        # collapse quadruplicate probes
TEST_RAW                <- TEST_RAW[row.names(SAGA_RAW),]                    # Expressionmatrix of Test Set with 36226 annotated probes
### 2.1 Make joint sample information file ####################################################
################################################################################################
all(colnames(pData.Test) == colnames(pData))
pData.joint <- rbind(pData,pData.Test)
### Boxplot of RAW intensity distribution (test samples are in black) ##
pdf(file="Boxplot_RAW.pdf",useDingbats = F,width = 6, height = 5)
boxplot(log2(cbind(SAGA_RAW,TEST_RAW)),col=pData.joint$IVIM_Farbe, names=pData.joint$Name,boxwex=0.6,cex.axis=0.5,las=2,outline=FALSE)
dev.off()
################################################################################################
#### 3.  Add-on Quantile Normalization #########################################################
###################################################################################ä############
qunorm.SAGA     <- qunormtrain(t(SAGA_RAW))
matrix.SAGA.qn  <- log2(t(qunorm.SAGA$xnorm))
matrix.test.qn  <- log2(t(qunormaddon(qunorm.SAGA, t(TEST_RAW))))
### Boxplot of quantile normalized intensity distribution ##
pdf(file="Boxplot_quantile normalized.pdf",useDingbats = F,width = 6, height = 5)
boxplot(cbind(matrix.SAGA.qn,matrix.test.qn),col=pData.joint$IVIM_Farbe,names=pData.joint$Name,boxwex=0.6,cex.axis=0.5,las=2,outline=FALSE)
dev.off()
#### 3.1 t-SNE reveals batch effects in quantile-normalized data  ##############################
###################################################################################ä############
matrix.joint.qn <- cbind(matrix.SAGA.qn,matrix.test.qn)
## for robustness of t-SNE prior dimensionality reduction with PCA is performed (initial dimensions = 50 (default))
set.seed(12)
tsne_out.qn <- Rtsne(t(matrix.joint.qn),dims = 2, perplexity = 16,
theta = 0.5, check_duplicates = FALSE, pca = TRUE, max_iter = 1000,
verbose = FALSE, is_distance = FALSE)
pdf(file="tSNE_quantile normalized.pdf",useDingbats = F,width = 5, height = 5)
plot(tsne_out.qn$Y,col=pData.joint$IVIM_Farbe, pch=16, cex=1.3) ### test samples are in black
dev.off()
################################################################################################
#### 4. Add-on COMBAT batch correction #########################################################
################################################################################################
batch.SAGA   <- as.factor(pData$Batch)
combat.SAGA  <- combatba(t(matrix.SAGA.qn), batch = batch.SAGA)
matrix.SAGA  <- t(combat.SAGA$xadj)
colnames(matrix.SAGA) <- row.names(pData)
matrix.test  <- t(combatbaaddon(combat.SAGA, t(matrix.test.qn), batch = as.factor(SIF$Batch)))
#### 4.2 t-SNE of batch corrected dataset ######################################################
###################################################################################ä############
matrix.joint <- cbind(matrix.SAGA,matrix.test)
set.seed(59)
tsne_out <- Rtsne(t(matrix.joint),dims = 2, perplexity = 16,
theta = 0.5, check_duplicates = FALSE, pca = TRUE, max_iter = 1000,
verbose = FALSE, is_distance = FALSE)
pdf(file="tSNE_quantile normalized_COMBAT.pdf",useDingbats = F,width = 5, height = 5)
plot(tsne_out$Y,col=pData.joint$IVIM_Farbe, pch=16, cex=1.3)
dev.off()
################################################################################################
#### 5. PCA on 11 best Predictors found by genetic algorithm ###################################
################################################################################################
matrix.Top   <- cbind(matrix.SAGA, matrix.test)[row.names(Top),]
index        <- nrow(pData)+nrow(pData.Test)
pdf(file="PCA_SAGA_optVars_new samples.pdf",useDingbats = F,width = 6, height = 5)
pca     <- prcomp(t(matrix.Top))
plot(pca$x, pch=16, col=pData.joint$Design_Color, cex=1, asp=1)
legend(1,-2, legend = c("transforming","mock","neutral","new samples"), col = unique(pData.joint$Design_Color), pch=16, bty="n", cex=0.8)
text(pca$x[c((nrow(pData)+1):index),c(1:2)], labels=pData.Test$Filename, cex= 0.3, pos=3, offset = 0.3) # new in V6: (nrow(pData)+1)
dev.off()
################################################################################################
#### 6. Caret SVMrad ###########################################################################
################################################################################################
matrix.train   <- t(matrix.SAGA[row.names(Top),])
labels.train   <- as.factor(pData$TrueLabel)
matrix.unknown <- t(matrix.test[row.names(Top),])
#### 6.1 Caret SVM on ClassProbs ###############################################################
################################################################################################
set.seed(45)
svm_fit.ROC <- train(matrix.train,labels.train,
method = "svmRadial",
tuneLength = 20,
trControl = trainControl(method = "repeatedcv",number = 10, repeats = 5,
classProbs = TRUE,summaryFunction = twoClassSummary))
svm_fit.ROC
Prediction_SVM.Caret <- predict(svm_fit.ROC, matrix.unknown, type = "prob")
Prediction_SVM.Caret$Prediction.SVM.Caret <- ifelse(Prediction_SVM.Caret$transforming>0.50,"transforming","untransforming")
Prediction_SVM.Caret <- cbind(pData.Test[,c(1:5)],Prediction_SVM.Caret)
write.table(Prediction_SVM.Caret, file = paste("Predictions.txt",sep = ""), sep="\t",row.names = TRUE,col.names=NA)
sets     <- read.delim("./SAGA_INBUILD/SAGA_INBUILD_Top20rfe_GSEA.txt",header=FALSE,sep="\t",stringsAsFactors =FALSE,row.names = 1)
SAGA.CORE<- setNames(split(sets, seq(nrow(sets))), rownames(sets))   # GeneSets have to be stored in a list object
ExpressionPhenoTest(eset.gsea,vars2test, p.adjust.method='BH')
phenoTest::ExpressionPhenoTest(eset.gsea,vars2test, p.adjust.method='BH')
library(saga)
library(saga)
library(sagadata)
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples" #path to SAGA samples"
### saga_gentargets; automatically generates an empty (!) sample information file
# Modify manually according to your requirements
#targets        <- saga_gentargets(samplepath)
################################################################################
### Wrapper function - all in one
### to use: uncomment function & execute
################################################################################
mySAGAres      <- saga_wrapper(samplepath, showModel=0, doGESEA=0)
gesea_results  <- saga_gesea(samplepath, saveResults=0)
library(saga)
library(saga)
gesea_results  <- saga_gesea(samplepath, saveResults=0)
dim(SAGA_Data)
source('C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga/R/saga_import.R', echo=TRUE)
library(saga)
warnings()
library(saga)
library(sagadata)
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples" #path to SAGA samples"
################################################################################
### Or use these single functions
################################################################################
### saga_import
rawdata        <- saga_import(samplepath, SAGA_Data, showjoint=1)
SAGA_RAW       <- rawdata$SAGA_RAW
TEST_RAW       <- rawdata$TEST_RAW
pData.joint    <- rawdata$pData.joint
pData.Test     <- rawdata$pData.Test
samplepath
SAGA_Data
saga_import(samplepath, SAGA_Data, showjoint=1)
SAGA_Data
Annotation          <- saga::Annotation
pData               <- saga::pData
################################################################################
### Or use these single functions
################################################################################
### saga_import
rawdata        <- saga_import(samplepath, showjoint=1)
SAGA_RAW       <- rawdata$SAGA_RAW
TEST_RAW       <- rawdata$TEST_RAW
pData.joint    <- rawdata$pData.joint
pData.Test     <- rawdata$pData.Test
library(saga)
library(sagadata)
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
### saga_gentargets; automatically generates an empty (!) sample information file
# Modify manually according to your requirements
#targets        <- saga_gentargets(samplepath)
################################################################################
### Wrapper function - all in one
### to use: uncomment function & execute
################################################################################
mySAGAres      <- saga_wrapper(samplepath, showModel=0, doGESEA=1)
# catch some errors
#path                <- getwd()
################################################################################################
#### 1. SAGA data: 91 training samples and 9 predictors found by genetic algorithm #############
################################################################################################
# load internal data
Annotation          <- saga::Annotation
pData               <- saga::pData
#targets             <- saga::saga_targets
SAGA_Data           <- SAGA_Data #read.delim(system.file("extdata", "SAGA_INBUILD_Data_AVE_91.txt", package = "saga"),header=TRUE,sep="\t", stringsAsFactors =FALSE)
SAGA_RAW            <- as.matrix(SAGA_Data[,-1] )
row.names(SAGA_RAW) <- SAGA_Data$PROBE_ID
### Read in .txt files from validation set: ####################################################
################################################################################################
SIF                     <- read.delim(paste(smplpath,"/SampleInformation.txt",sep=""),row.names=1,header=TRUE,sep="\t", stringsAsFactors = F) # Sample Information File for phenoTest
pData.Test              <- read.delim(paste(smplpath,"/SampleInformation.txt",sep=""),row.names=1,header=TRUE,sep="\t", stringsAsFactors = F) # Sample Information File for SAGA-SVM
pData.Test$Batch        <- pData.Test$Batch + 19
smplpath
smplpath=samplepath
Annotation          <- saga::Annotation
pData               <- saga::pData
#targets             <- saga::saga_targets
SAGA_Data           <- SAGA_Data #read.delim(system.file("extdata", "SAGA_INBUILD_Data_AVE_91.txt", package = "saga"),header=TRUE,sep="\t", stringsAsFactors =FALSE)
SAGA_RAW            <- as.matrix(SAGA_Data[,-1] )
row.names(SAGA_RAW) <- SAGA_Data$PROBE_ID
### Read in .txt files from validation set: ####################################################
################################################################################################
SIF                     <- read.delim(paste(smplpath,"/SampleInformation.txt",sep=""),row.names=1,header=TRUE,sep="\t", stringsAsFactors = F) # Sample Information File for phenoTest
pData.Test              <- read.delim(paste(smplpath,"/SampleInformation.txt",sep=""),row.names=1,header=TRUE,sep="\t", stringsAsFactors = F) # Sample Information File for SAGA-SVM
pData.Test$Batch        <- pData.Test$Batch + 19
smplpath
smplpath=samplepath
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
smplpath=samplepath
smplpath
SIF                     <- read.delim(paste(smplpath,"/SampleInformation.txt",sep=""),row.names=1,header=TRUE,sep="\t", stringsAsFactors = F) # Sample Information File for phenoTest
pData.Test              <- read.delim(paste(smplpath,"/SampleInformation.txt",sep=""),row.names=1,header=TRUE,sep="\t", stringsAsFactors = F) # Sample Information File for SAGA-SVM
pData.Test$Batch        <- pData.Test$Batch + 19              # 19 Batches are already in the SAGA Inbuild DataSet
pData.Test$IVIM_Color   <- rep("#000000", nrow(pData.Test))
pData.Test$Design_Color <- rep("#000000", nrow(pData.Test))
pData.Test$IVIM_ID      <- rep(NA, nrow(pData.Test))
pData.Test$IVIM_Farbe   <- rep("#000000", nrow(pData.Test))
TEST_Data               <- read.maimages(files=pData.Test$Filename, path=smplpath, source="agilent.median", green.only=T,
columns=list(G="gMedianSignal"), annotation=c("ProbeName", "GeneName"))
?read.maimages
library(limma)
TEST_Data               <- read.maimages(files=pData.Test$Filename, path=smplpath, source="agilent.median", green.only=T,
columns=list(G="gMedianSignal"), annotation=c("ProbeName", "GeneName"))
colnames(TEST_Data)     <- row.names(pData.Test)
TEST_RAW                <- TEST_Data$E                                       # export Expression matrix
row.names(TEST_RAW)     <- TEST_Data$genes$ProbeName                         # assign PROBE IDs as row.names
TEST_RAW                <- avereps(TEST_RAW, ID= row.names(TEST_RAW))        # collapse quadruplicate probes
TEST_RAW                <- TEST_RAW[row.names(SAGA_RAW),]                    # Expressionmatrix of Test Set with 36226 annotated probes
all( colnames(pData.Test) == colnames(pData) )
pData.joint <- rbind(pData,pData.Test)
matrix.joint<- cbind(SAGA_RAW,TEST_RAW)
boxplot(log2(cbind(SAGA_RAW,TEST_RAW)),
col       = pData.joint$IVIM_Farbe,
names     = pData.joint$Filename,
boxwex    = 0.6,
cex.axis  = 0.5,
las       = 2,
outline   = FALSE,
main      = "SAGA joint data set (raw)")
pData.joint
pData.joint$Filename
pData.joint
TEST_RAW
boxplot(log2(cbind(SAGA_RAW,TEST_RAW)),
col       = pData.joint$IVIM_Farbe,
#names     = pData.joint$Filename,
boxwex    = 0.6,
cex.axis  = 0.5,
las       = 2,
outline   = FALSE,
main      = "SAGA joint data set (raw)")
pData.joint$IVIM_Farbe
length(pData.joint$IVIM_Farbe)
length(pData.joint$Filename)
pData.joint$Filename
boxplot(log2(cbind(SAGA_RAW,TEST_RAW)),
col       = pData.joint$IVIM_Farbe,
names     = pData.joint$Filename,
boxwex    = 0.6,
cex.axis  = 0.5,
las       = 2,
outline   = FALSE,
main      = "SAGA joint data set (raw)")
TEST_RAW
dim(TEST_RAW)
dim(SAGA_RAW)
SAGA_Data
dim(SAGA_Data)
library(saga)
smplpath=samplepath
showjoint=1
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
### sag
smplpath=samplepath
showjoint=1
################################################################################################
#### 1. SAGA data: 91 training samples and 9 predictors found by genetic algorithm #############
################################################################################################
# load internal data
Annotation          <- saga::Annotation
pData               <- saga::pData
#targets             <- saga::saga_targets
SAGA_Data           <- SAGA_Data #read.delim(system.file("extdata", "SAGA_INBUILD_Data_AVE_91.txt", package = "saga"),header=TRUE,sep="\t", stringsAsFactors =FALSE)
SAGA_RAW            <- as.matrix(SAGA_Data[,-1] )
row.names(SAGA_RAW) <- SAGA_Data$PROBE_ID
### Read in .txt files from validation set: ####################################################
################################################################################################
SIF                     <- read.delim(paste(smplpath,"/SampleInformation.txt",sep=""),row.names=1,header=TRUE,sep="\t", stringsAsFactors = F) # Sample Information File for phenoTest
pData.Test              <- read.delim(paste(smplpath,"/SampleInformation.txt",sep=""),row.names=1,header=TRUE,sep="\t", stringsAsFactors = F) # Sample Information File for SAGA-SVM
pData.Test$Batch        <- pData.Test$Batch + 19              # 19 Batches are already in the SAGA Inbuild DataSet
pData.Test$IVIM_Color   <- rep("#000000", nrow(pData.Test))
pData.Test$Design_Color <- rep("#000000", nrow(pData.Test))
pData.Test$IVIM_ID      <- rep(NA, nrow(pData.Test))
pData.Test$IVIM_Farbe   <- rep("#000000", nrow(pData.Test))
TEST_Data               <- read.maimages(files=pData.Test$Filename, path=smplpath, source="agilent.median", green.only=T,
columns=list(G="gMedianSignal"), annotation=c("ProbeName", "GeneName"))
library(limma)
################################################################################################
SIF                     <- read.delim(paste(smplpath,"/SampleInformation.txt",sep=""),row.names=1,header=TRUE,sep="\t", stringsAsFactors = F) # Sample Information File for phenoTest
pData.Test              <- read.delim(paste(smplpath,"/SampleInformation.txt",sep=""),row.names=1,header=TRUE,sep="\t", stringsAsFactors = F) # Sample Information File for SAGA-SVM
pData.Test$Batch        <- pData.Test$Batch + 19              # 19 Batches are already in the SAGA Inbuild DataSet
pData.Test$IVIM_Color   <- rep("#000000", nrow(pData.Test))
pData.Test$Design_Color <- rep("#000000", nrow(pData.Test))
pData.Test$IVIM_ID      <- rep(NA, nrow(pData.Test))
pData.Test$IVIM_Farbe   <- rep("#000000", nrow(pData.Test))
TEST_Data               <- read.maimages(files=pData.Test$Filename, path=smplpath, source="agilent.median", green.only=T,
columns=list(G="gMedianSignal"), annotation=c("ProbeName", "GeneName"))
colnames(TEST_Data)     <- row.names(pData.Test)
TEST_RAW                <- TEST_Data$E                                       # export Expression matrix
row.names(TEST_RAW)     <- TEST_Data$genes$ProbeName                         # assign PROBE IDs as row.names
TEST_RAW                <- avereps(TEST_RAW, ID= row.names(TEST_RAW))        # collapse quadruplicate probes
TEST_RAW                <- TEST_RAW[row.names(SAGA_RAW),]                    # Expressionmatrix of Test Set with 36226 annotated probes
### Make joint sample information file #########################################################
################################################################################################
all( colnames(pData.Test) == colnames(pData) )
pData.joint <- rbind(pData,pData.Test)
matrix.joint<- cbind(SAGA_RAW,TEST_RAW)
### test samples are in black ##
if(showjoint ==1)
boxplot(log2(cbind(SAGA_RAW,TEST_RAW)),
col       = pData.joint$IVIM_Farbe,
names     = pData.joint$Filename,
boxwex    = 0.6,
cex.axis  = 0.5,
las       = 2,
outline   = FALSE,
main      = "SAGA joint data set (raw)")
library(saga)
library(saga)
library(sagadata)
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
library(saga)
library(sagadata)
library(saga)
library(sagadata)
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
################################################################################
### Or use these single functions
################################################################################
### saga_import
rawdata        <- saga_import(smplpath=samplepath, showjoint=1)
SAGA_RAW       <- rawdata$SAGA_RAW
TEST_RAW       <- rawdata$TEST_RAW
pData.joint    <- rawdata$pData.joint
pData.Test     <- rawdata$pData.Test
### normalize saga data (plotnumber=1 for normalized boxplot, 2 for tSNE plot)
normalized     <- saga_norm(SAGA_RAW, TEST_RAW, pData.joint, plotnumber=1)
qunorm.SAGA    <- normalized$qunorm.SAGA
matrix.SAGA.qn <- normalized$matrix.SAGA.qn
matrix.test.qn <- normalized$matrix.test.qn
batchnorm      <- saga_batch(matrix.SAGA.qn, matrix.test.qn, rawdata, pData.joint, plotnumber=1)
index          <- batchnorm$index
matrix.SAGA    <- batchnorm$matrix.SAGA
matrix.test    <- batchnorm$matrix.test
### Sampling and model data collection
model          <- saga_sampling(matrix.SAGA, matrix.test)
matrix.train   <- model$matrix.train
labels.train   <- model$labels.train
matrix.unknown <- model$matrix.unknown
output         <- saga_predict(samplepath, matrix.train, labels.train, matrix.unknown,
pData.Test, writeFile=1, showRoc=0)
classes        <- output$predictions
classes
### GESEA
gesea_results  <- saga_gesea(samplepath, saveResults=1)
mySAGAres      <- saga_wrapper(samplepath, showModel=0, doGESEA=1)
remove.packages("saga", lib="~/R/win-library/3.6")
library(saga)
remove.packages("sagadata", lib="~/R/win-library/3.6")
library(saga)
library(sagadata)
devtools::install_github("mytalbot/saga_package")
library(saga)
remove.packages("saga", lib="~/R/win-library/3.6")
devtools::install_github("mytalbot/saga_package")
devtools::install_github("mytalbot/sagadata")
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
mySAGAres      <- saga_wrapper(samplepath, showModel=0, doGESEA=1)
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples/"
mySAGAres      <- saga_wrapper(samplepath, showModel=0, doGESEA=1)
library(saga)
library(sagadata)
# path to your sample data
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples/"
################################################################################
mySAGAres      <- saga_wrapper(samplepath, showModel=0, doGESEA=1)
library(saga)
library(saga)
library(sagadata)
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples/"
################################################################################
### Or use these single functions
################################################################################
### saga_import
rawdata        <- saga_import(smplpath=samplepath, showjoint=1)
mySAGAres      <- saga_wrapper(samplepath, showModel=0, doGESEA=1)
library(saga)
################################################################################
### Or use these single functions
################################################################################
### saga_import
rawdata        <- saga_import(smplpath=samplepath, showjoint=1)
SAGA_RAW       <- rawdata$SAGA_RAW
TEST_RAW       <- rawdata$TEST_RAW
pData.joint    <- rawdata$pData.joint
pData.Test     <- rawdata$pData.Test
### normalize saga data (plotnumber=1 for normalized boxplot, 2 for tSNE plot)
normalized     <- saga_norm(SAGA_RAW, TEST_RAW, pData.joint, plotnumber=1)
qunorm.SAGA    <- normalized$qunorm.SAGA
matrix.SAGA.qn <- normalized$matrix.SAGA.qn
matrix.test.qn <- normalized$matrix.test.qn
### remove batch effects
# plotnumber = 1 (tSNE of first 2 dimensions)
# plotnumber = 2 (PCA of first 2 dimensions)
batchnorm      <- saga_batch(matrix.SAGA.qn, matrix.test.qn, rawdata, pData.joint, plotnumber=1)
index          <- batchnorm$index
matrix.SAGA    <- batchnorm$matrix.SAGA
matrix.test    <- batchnorm$matrix.test
### Sampling and model data collection
model          <- saga_sampling(matrix.SAGA, matrix.test)
matrix.train   <- model$matrix.train
labels.train   <- model$labels.train
matrix.unknown <- model$matrix.unknown
### Array predictions with optimized SVM parameters (default settings)
output         <- saga_predict(samplepath, matrix.train, labels.train, matrix.unknown,
pData.Test, writeFile=1, showRoc=0)
classes        <- output$predictions
classes
gesea_results  <- saga_gesea(samplepath, saveResults=1)
remove.packages("saga", lib="~/R/win-library/3.6")
remove.packages("sagadata", lib="~/R/win-library/3.6")
library(saga)
remove.packages("saga", lib="~/R/win-library/3.6")
devtools::install_github("mytalbot/saga_package")
library(saga)
remove.packages("saga", lib="~/R/win-library/3.6")
devtools::install_github("mytalbot/saga_package")
library(saga)
################################################################################
### Or use these single functions
################################################################################
### saga_import
rawdata        <- saga_import(smplpath=samplepath, showjoint=1)
SAGA_RAW       <- rawdata$SAGA_RAW
TEST_RAW       <- rawdata$TEST_RAW
pData.joint    <- rawdata$pData.joint
pData.Test     <- rawdata$pData.Test
### normalize saga data (plotnumber=1 for normalized boxplot, 2 for tSNE plot)
normalized     <- saga_norm(SAGA_RAW, TEST_RAW, pData.joint, plotnumber=1)
qunorm.SAGA    <- normalized$qunorm.SAGA
matrix.SAGA.qn <- normalized$matrix.SAGA.qn
matrix.test.qn <- normalized$matrix.test.qn
### remove batch effects
# plotnumber = 1 (tSNE of first 2 dimensions)
# plotnumber = 2 (PCA of first 2 dimensions)
batchnorm      <- saga_batch(matrix.SAGA.qn, matrix.test.qn, rawdata, pData.joint, plotnumber=1)
index          <- batchnorm$index
matrix.SAGA    <- batchnorm$matrix.SAGA
matrix.test    <- batchnorm$matrix.test
### Sampling and model data collection
model          <- saga_sampling(matrix.SAGA, matrix.test)
matrix.train   <- model$matrix.train
labels.train   <- model$labels.train
matrix.unknown <- model$matrix.unknown
### Array predictions with optimized SVM parameters (default settings)
output         <- saga_predict(samplepath, matrix.train, labels.train, matrix.unknown,
pData.Test, writeFile=1, showRoc=0)
classes        <- output$predictions
classes
library(saga)
sessionInfo()
library(saga)
library(phenoTest)
library(phenoTest)
library(saga)
# Initialize
library(phenoTest)
library(saga)
saga
library(phenoTest)
library(saga)
library(sagadata)
devtools::install_github("mytalbot/sagadata")
library(sagadata)
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
################################################################################
### Or use these single functions
################################################################################
### saga_import
rawdata        <- saga_import(smplpath=samplepath, showjoint=1)
SAGA_RAW       <- rawdata$SAGA_RAW
TEST_RAW       <- rawdata$TEST_RAW
pData.joint    <- rawdata$pData.joint
pData.Test     <- rawdata$pData.Test
### normalize saga data (plotnumber=1 for normalized boxplot, 2 for tSNE plot)
normalized     <- saga_norm(SAGA_RAW, TEST_RAW, pData.joint, plotnumber=1)
qunorm.SAGA    <- normalized$qunorm.SAGA
matrix.SAGA.qn <- normalized$matrix.SAGA.qn
matrix.test.qn <- normalized$matrix.test.qn
### remove batch effects
# plotnumber = 1 (tSNE of first 2 dimensions)
# plotnumber = 2 (PCA of first 2 dimensions)
batchnorm      <- saga_batch(matrix.SAGA.qn, matrix.test.qn, rawdata, pData.joint, plotnumber=1)
index          <- batchnorm$index
matrix.SAGA    <- batchnorm$matrix.SAGA
matrix.test    <- batchnorm$matrix.test
### Sampling and model data collection
model          <- saga_sampling(matrix.SAGA, matrix.test)
matrix.train   <- model$matrix.train
labels.train   <- model$labels.train
matrix.unknown <- model$matrix.unknown
### Array predictions with optimized SVM parameters (default settings)
output         <- saga_predict(samplepath, matrix.train, labels.train, matrix.unknown,
pData.Test, writeFile=1, showRoc=0)
classes        <- output$predictions
classes
gesea_results  <- saga_gesea(samplepath, saveResults=1)
library(saga)
library(saga)
remove.packages("saga", lib="~/R/win-library/3.6")
remove.packages("sagadata", lib="~/R/win-library/3.6")
devtools::install_github("mytalbot/sagadata")
devtools::install_github("mytalbot/saga_package")
# Initialize
library(phenoTest)
library(saga)
library(sagadata)
library(saga)
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
################################################################################
### Wrapper function - all in one
### to use: uncomment function & execute
################################################################################
mySAGAres      <- saga_wrapper(samplepath, showModel=0, doGESEA=1)
