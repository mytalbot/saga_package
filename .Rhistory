#################################################################################################
maxBatch   <- max(as.integer(SIF$Batch))   # how many assays / batches
for(i in 1:maxBatch) {
SIF.i <- SIF[SIF$Batch==i,]
RAW.i <- read.maimages(files=SIF.i$Filename, path=smplpath, source="agilent.median", green.only=T,
columns=list(G="gMedianSignal"), annotation=c("ProbeName", "GeneName"))
colnames(RAW.i) <- row.names(SIF.i)
#### 2.1. Normalize, average ###################################################################
RMA.i <- normalizeBetweenArrays(RAW.i, method="quantile")                 # quantil normalize
RMA.i <- avereps(RMA.i,ID= RMA.i$genes$ProbeName)                                # average replicates to one value for each probe
matrix.gsea <- RMA.i$E                                               # extract log2 expression values
#### 2.3. make ExpressionSet (Biobase) object ##################################################
metadata  <- data.frame(labelDescription= rep(NA,dim(SIF.i)[2]),row.names=colnames(SIF.i))   # varMetadata: empty, but required
phenoData <- new("AnnotatedDataFrame",data=SIF.i, varMetadata = metadata)     # annotatedDataFrame for the annotation of the samples
eset.gsea <- ExpressionSet(assayData = matrix.gsea, phenoData = phenoData)  # this is the ExpressionSet required for phenoTest
#### 2.4. make ePheno object: contains the FCs associated with Group variable ##################
vars2test   <- list(ordinal="Group")    # Variables (here: Groups) to test against MOCK, which are always Group = 1 in the SIF
epheno.gsea <- ExpressionPhenoTest(eset.gsea,vars2test,p.adjust.method='BH')
#### 2.5 GSEA #################################################################################
SAGA.GSEA <- gsea(x=epheno.gsea, gsets=SAGA.CORE ,B=2000,                  # calculate GSEA-scores based on the FC in the epheno object
center = TRUE, test = "perm", p.adjust.method='BH')
result            <- summary(SAGA.GSEA)[,c(1,2,3,5,8)]                     # extract results (only NES- normalized enrichment scores)
#NEW
result$pred.class <- ifelse(result$nes>0,"transforming","untransforming")  # prediction based on NES
#### 2.6 output ###############################################################################
Group <- NULL    ### pull out the Group index number from the result table
for (a in 1:nrow(result)) {Group[a] <- unlist(strsplit(as.character(result$variable[a]), ".", fixed = TRUE))[2] }
result$Group     <- Group
SIF.sub           <- SIF.i[SIF.i$Group != 1, c(3,4,1) ]                     # pull out info of tested Groups
SIF.sub$SampleID  <- row.names(SIF.sub)
result.m          <- merge(SIF.sub,result, by.x="Group", by.y = "Group") # merge result with SIF for SampleIDs and FileNames
write.table(result.m, file = paste(smplpath,"/Results_SAGA.GSEA_Batch_",i,".txt",sep = ""), sep="\t",row.names = FALSE)
# make pdf report
pdf(file=paste(smplpath,"/","SAGA.GSEA_Batch_",i,".pdf",sep = ""),useDingbats = F,width = 10, height = 10)
grid.table(result.m,rows = NULL)
plot(SAGA.GSEA,es.nes='nes',selGsets='SAGA.CORE')
dev.off()
}
}
gesea_results  <- saga_gesea(smplpath=samplepath, saveResults=1)
gridExtra::grid.table(result.m,rows = NULL)
grid.table(result.m,rows = NULL)
saga_gesea    <- function(smplpath, saveResults=0){
sets        <- saga::sets
SAGA.CORE   <- setNames(split(sets, seq(nrow(sets))), rownames(sets))   # GeneSets have to be stored in a list object
SIF         <- read.delim(paste(smplpath,"/SampleInformation.txt",sep=""),
row.names=1,header=TRUE,sep="\t", stringsAsFactors = F) # Sample Information File for phenoTest
### 1.1. Read in files from test and loop over all batches separately from here on ##############
#################################################################################################
maxBatch   <- max(as.integer(SIF$Batch))   # how many assays / batches
for(i in 1:maxBatch) {
SIF.i <- SIF[SIF$Batch==i,]
RAW.i <- read.maimages(files=SIF.i$Filename, path=smplpath, source="agilent.median", green.only=T,
columns=list(G="gMedianSignal"), annotation=c("ProbeName", "GeneName"))
colnames(RAW.i) <- row.names(SIF.i)
#### 2.1. Normalize, average ###################################################################
RMA.i <- normalizeBetweenArrays(RAW.i, method="quantile")                 # quantil normalize
RMA.i <- avereps(RMA.i,ID= RMA.i$genes$ProbeName)                                # average replicates to one value for each probe
matrix.gsea <- RMA.i$E                                               # extract log2 expression values
#### 2.3. make ExpressionSet (Biobase) object ##################################################
metadata  <- data.frame(labelDescription= rep(NA,dim(SIF.i)[2]),row.names=colnames(SIF.i))   # varMetadata: empty, but required
phenoData <- new("AnnotatedDataFrame",data=SIF.i, varMetadata = metadata)     # annotatedDataFrame for the annotation of the samples
eset.gsea <- ExpressionSet(assayData = matrix.gsea, phenoData = phenoData)  # this is the ExpressionSet required for phenoTest
#### 2.4. make ePheno object: contains the FCs associated with Group variable ##################
vars2test   <- list(ordinal="Group")    # Variables (here: Groups) to test against MOCK, which are always Group = 1 in the SIF
epheno.gsea <- ExpressionPhenoTest(eset.gsea,vars2test,p.adjust.method='BH')
#### 2.5 GSEA #################################################################################
SAGA.GSEA <- gsea(x=epheno.gsea, gsets=SAGA.CORE ,B=2000,                  # calculate GSEA-scores based on the FC in the epheno object
center = TRUE, test = "perm", p.adjust.method='BH')
result            <- summary(SAGA.GSEA)[,c(1,2,3,5,8)]                     # extract results (only NES- normalized enrichment scores)
#NEW
result$pred.class <- ifelse(result$nes>0,"transforming","untransforming")  # prediction based on NES
#### 2.6 output ###############################################################################
Group <- NULL    ### pull out the Group index number from the result table
for (a in 1:nrow(result)) {Group[a] <- unlist(strsplit(as.character(result$variable[a]), ".", fixed = TRUE))[2] }
result$Group     <- Group
SIF.sub           <- SIF.i[SIF.i$Group != 1, c(3,4,1) ]                     # pull out info of tested Groups
SIF.sub$SampleID  <- row.names(SIF.sub)
result.m          <- merge(SIF.sub,result, by.x="Group", by.y = "Group") # merge result with SIF for SampleIDs and FileNames
write.table(result.m, file = paste(smplpath,"/Results_SAGA.GSEA_Batch_",i,".txt",sep = ""), sep="\t",row.names = FALSE)
# make pdf report
pdf(file=paste(smplpath,"/","SAGA.GSEA_Batch_",i,".pdf",sep = ""),useDingbats = F,width = 10, height = 10)
gridExtra::grid.table(result.m,rows = NULL)
plot(SAGA.GSEA,es.nes='nes',selGsets='SAGA.CORE')
dev.off()
}
}
gesea_results  <- saga_gesea(smplpath=samplepath, saveResults=1)
library(saga)
library(phenoTest)
library(saga)
library(sagadata)
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples2"
gesea_results
saga_gesea
gesea_results  <- saga_gesea(smplpath=samplepath, saveResults=1)
pkgdown::build_site()
remove.packages("saga", lib="~/R/win-library/3.6")
remove.packages("sagadata", lib="~/R/win-library/3.6")
# get and install the SAGA Package/Data
devtools::install_github("mytalbot/sagadata")
devtools::install_github("mytalbot/saga_package")
# Initialize
library(phenoTest)
library(saga)
library(sagadata)
# path to your sample data
# samplepath     <- "...path to your testfiles and sample information file (SIF)"
# samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples2"
### saga_gentargets; automatically generates an empty (!) sample information file
# Modify manually according to your requirements
#targets        <- saga_gentargets(samplepath)
################################################################################
### Wrapper function - all in one
### to use: uncomment function & execute
################################################################################
mySAGAres      <- saga_wrapper(samplepath, showModel=0, doGESEA=1)
library(saga)
library(sagadata)
mySAGAres      <- saga_wrapper(samplepath, showModel=0, doGESEA=1)
devtools::install_github("mytalbot/saga_package")
# samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples2"
mySAGAres      <- saga_wrapper(samplepath, showModel=0, doGESEA=1)
remove.packages("saga", lib="~/R/win-library/3.6")
remove.packages("sagadata", lib="~/R/win-library/3.6")
devtools::install_github("mytalbot/sagadata")
devtools::install_github("mytalbot/saga_package")
library(phenoTest)
library(saga)
library(sagadata)
library(saga)
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples2"
mySAGAres      <- saga_wrapper(samplepath, showModel=0, doGESEA=1)
pkgdown::build_site()
pkgdown::build_site()
browseVignettes("saga")
browseVignettes("saga_Vignette")
browseVignettes()
browseVignettes("saga_vignette")
library(saga)
browseVignettes("saga_vignette")
library(saga)
library(saga)
browseVignettes("saga")
browseVignettes("saga_vignette")
browseVignettes("saga_vignette")
library("saga", lib.loc="~/R/win-library/3.6")
remove.packages("saga", lib="~/R/win-library/3.6")
install.packages("C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_0.0.1.tar.gz", repos = NULL, type = "source")
browseVignettes("saga_vignette")
devtools::check()
remove.packages("saga", lib="~/R/win-library/3.6")
library(saga)
check()
devtools::check()
library(saga)
?Matrix
library(saga)
# Initialize
library(phenoTest)
library(saga)
library(sagadata)
# path to your sample data
# samplepath     <- "...path to your testfiles and sample information file (SIF)"
# samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples2"
### saga_gentargets; automatically generates an empty (!) sample information file
# Modify manually according to your requirements
#targets        <- saga_gentargets(samplepath)
################################################################################
### Wrapper function - all in one
### to use: uncomment function & execute
################################################################################
mySAGAres      <- saga_wrapper(samplepath, showModel=0, doGESEA=1)
remove.packages("saga", lib="~/R/win-library/3.6")
devtools::install_github("mytalbot/saga_package", build_vignettes = TRUE)
library(saga)
browseVignettes(saga)
browseVignettes(saga_vignette)
browseVignettes("saga_vignette")
browseVignettes("saga")
targets        <- saga_gentargets("C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples")
library(saga)
targets        <- saga_gentargets("C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples")
targets
browseVignettes("saga")
library(saga)
targets        <- saga_gentargets("C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples")
library(saga)
library(saga)
targets        <- saga_gentargets("C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples")
library(saga)
usethis::use_namespace()
getwd
getwd()
setwd(C:/MHH Bleich/Kooperationen/Rothe/SAGA)
setwd("C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga")
getwd()
setwd("C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga/")
usethis::use_namespace()
library(saga)
?phenoTest
library(saga)
pkgdown::build_site()
remove.packages("saga", lib="~/R/win-library/3.6")
library(saga)
devtools::build("C:/MHH Bleich/Kooperationen/Rothe/SAGA/test/saga_test.tar.gz", binary=TRUE)
devtools::build("C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga/saga_test.tar.gz", binary=TRUE)
library(saga)
pkgdown::build_site()
remove.packages("saga", lib="~/R/win-library/3.6")
devtools::install_github("mytalbot/saga_package", build_vignettes = TRUE)
browseVignettes("saga")
vignette("saga")
?vignette
library(saga)
library(saga)
pkgdown::build_site()
# Initialize
library(phenoTest)
library(saga)
library(sagadata)
# path to your sample data
# samplepath     <- "...path to your testfiles and sample information file (SIF)"
# samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
#samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples2"
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
################################################################################
### Or use these single functions
################################################################################
### saga_import
rawdata        <- saga_import(smplpath=samplepath, showjoint=1)
SAGA_RAW       <- rawdata$SAGA_RAW
TEST_RAW       <- rawdata$TEST_RAW
pData.joint    <- rawdata$pData.joint
pData.Test     <- rawdata$pData.Test
### normalize saga data (plotnumber=1 for normalized boxplot, 2 for tSNE plot)
normalized     <- saga_norm(SAGA_RAW, TEST_RAW, pData.joint, plotnumber=1)
qunorm.SAGA    <- normalized$qunorm.SAGA
matrix.SAGA.qn <- normalized$matrix.SAGA.qn
matrix.test.qn <- normalized$matrix.test.qn
### remove batch effects
# plotnumber = 1 (tSNE of first 2 dimensions)
# plotnumber = 2 (PCA of first 2 dimensions)
batchnorm      <- saga_batch(matrix.SAGA.qn, matrix.test.qn, rawdata, pData.joint, plotnumber=1)
index          <- batchnorm$index
matrix.SAGA    <- batchnorm$matrix.SAGA
matrix.test    <- batchnorm$matrix.test
### Sampling and model data collection
model          <- saga_sampling(matrix.SAGA, matrix.test)
matrix.train   <- model$matrix.train
labels.train   <- model$labels.train
matrix.unknown <- model$matrix.unknown
### Array predictions with optimized SVM parameters (default settings)
output         <- saga_predict(samplepath, matrix.train, labels.train, matrix.unknown,
pData.Test, writeFile=1, showRoc=1)
classes        <- output$predictions
classes
gesea_results  <- saga_gesea(smplpath=samplepath, saveResults=0)
################################################################################
### Or use these single functions
################################################################################
### saga_import
rawdata        <- saga_import(smplpath=samplepath, showjoint=1)
SAGA_RAW       <- rawdata$SAGA_RAW
TEST_RAW       <- rawdata$TEST_RAW
pData.joint    <- rawdata$pData.joint
pData.Test     <- rawdata$pData.Test
### normalize saga data (plotnumber=1 for normalized boxplot, 2 for tSNE plot)
normalized     <- saga_norm(SAGA_RAW, TEST_RAW, pData.joint, plotnumber=1)
qunorm.SAGA    <- normalized$qunorm.SAGA
matrix.SAGA.qn <- normalized$matrix.SAGA.qn
matrix.test.qn <- normalized$matrix.test.qn
### remove batch effects
# plotnumber = 1 (tSNE of first 2 dimensions)
# plotnumber = 2 (PCA of first 2 dimensions)
batchnorm      <- saga_batch(matrix.SAGA.qn, matrix.test.qn, rawdata, pData.joint, plotnumber=1)
index          <- batchnorm$index
matrix.SAGA    <- batchnorm$matrix.SAGA
matrix.test    <- batchnorm$matrix.test
### Sampling and model data collection
model          <- saga_sampling(matrix.SAGA, matrix.test)
matrix.train   <- model$matrix.train
labels.train   <- model$labels.train
matrix.unknown <- model$matrix.unknown
### Array predictions with optimized SVM parameters (default settings)
output         <- saga_predict(samplepath, matrix.train, labels.train, matrix.unknown,
pData.Test, writeFile=1, showRoc=1)
classes        <- output$predictions
classes
matrix.train
labels.train
matrix.unknown
pData.Test
labels.train
remove.packages("saga", lib="~/R/win-library/3.6")
devtools::install_github("mytalbot/saga_package", build_vignettes = TRUE)
# Initialize
library(phenoTest)
library(saga)
library(sagadata)
# path to your sample data
# samplepath     <- "...path to your testfiles and sample information file (SIF)"
# samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
#samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples2"
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
################################################################################
### Or use these single functions
################################################################################
### saga_import
rawdata        <- saga_import(smplpath=samplepath, showjoint=1)
SAGA_RAW       <- rawdata$SAGA_RAW
TEST_RAW       <- rawdata$TEST_RAW
pData.joint    <- rawdata$pData.joint
pData.Test     <- rawdata$pData.Test
### normalize saga data (plotnumber=1 for normalized boxplot, 2 for tSNE plot)
normalized     <- saga_norm(SAGA_RAW, TEST_RAW, pData.joint, plotnumber=1)
qunorm.SAGA    <- normalized$qunorm.SAGA
matrix.SAGA.qn <- normalized$matrix.SAGA.qn
matrix.test.qn <- normalized$matrix.test.qn
### remove batch effects
# plotnumber = 1 (tSNE of first 2 dimensions)
# plotnumber = 2 (PCA of first 2 dimensions)
batchnorm      <- saga_batch(matrix.SAGA.qn, matrix.test.qn, rawdata, pData.joint, plotnumber=1)
index          <- batchnorm$index
matrix.SAGA    <- batchnorm$matrix.SAGA
matrix.test    <- batchnorm$matrix.test
### Sampling and model data collection
model          <- saga_sampling(matrix.SAGA, matrix.test)
matrix.train   <- model$matrix.train
labels.train   <- model$labels.train
matrix.unknown <- model$matrix.unknown
### Array predictions with optimized SVM parameters (default settings)
output         <- saga_predict(samplepath, matrix.train, labels.train, matrix.unknown,
pData.Test, writeFile=1, showRoc=1)
classes        <- output$predictions
classes
rawdata
output
remove.packages("saga", lib="~/R/win-library/3.6")
devtools::install_github("mytalbot/saga_package", build_vignettes = TRUE)
# Initialize
library(phenoTest)
library(saga)
library(sagadata)
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples2"
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
################################################################################
### Or use these single functions
################################################################################
### saga_import
rawdata        <- saga_import(smplpath=samplepath, showjoint=1)
SAGA_RAW       <- rawdata$SAGA_RAW
TEST_RAW       <- rawdata$TEST_RAW
pData.joint    <- rawdata$pData.joint
pData.Test     <- rawdata$pData.Test
### normalize saga data (plotnumber=1 for normalized boxplot, 2 for tSNE plot)
normalized     <- saga_norm(SAGA_RAW, TEST_RAW, pData.joint, plotnumber=1)
qunorm.SAGA    <- normalized$qunorm.SAGA
matrix.SAGA.qn <- normalized$matrix.SAGA.qn
matrix.test.qn <- normalized$matrix.test.qn
### remove batch effects
# plotnumber = 1 (tSNE of first 2 dimensions)
# plotnumber = 2 (PCA of first 2 dimensions)
batchnorm      <- saga_batch(matrix.SAGA.qn, matrix.test.qn, rawdata, pData.joint, plotnumber=1)
index          <- batchnorm$index
matrix.SAGA    <- batchnorm$matrix.SAGA
matrix.test    <- batchnorm$matrix.test
### Sampling and model data collection
model          <- saga_sampling(matrix.SAGA, matrix.test)
matrix.train   <- model$matrix.train
labels.train   <- model$labels.train
matrix.unknown <- model$matrix.unknown
### Array predictions with optimized SVM parameters (default settings)
output         <- saga_predict(samplepath, matrix.train, labels.train, matrix.unknown,
pData.Test, writeFile=1, showRoc=1)
classes        <- output$predictions
classes
# Initialize
library(phenoTest)
library(saga)
library(sagadata)
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
################################################################################
### Or use these single functions
################################################################################
### saga_import
rawdata        <- saga_import(smplpath=samplepath, showjoint=1)
SAGA_RAW       <- rawdata$SAGA_RAW
TEST_RAW       <- rawdata$TEST_RAW
pData.joint    <- rawdata$pData.joint
pData.Test     <- rawdata$pData.Test
### normalize saga data (plotnumber=1 for normalized boxplot, 2 for tSNE plot)
normalized     <- saga_norm(SAGA_RAW, TEST_RAW, pData.joint, plotnumber=1)
qunorm.SAGA    <- normalized$qunorm.SAGA
matrix.SAGA.qn <- normalized$matrix.SAGA.qn
matrix.test.qn <- normalized$matrix.test.qn
### remove batch effects
# plotnumber = 1 (tSNE of first 2 dimensions)
# plotnumber = 2 (PCA of first 2 dimensions)
batchnorm      <- saga_batch(matrix.SAGA.qn, matrix.test.qn, rawdata, pData.joint, plotnumber=1)
index          <- batchnorm$index
matrix.SAGA    <- batchnorm$matrix.SAGA
matrix.test    <- batchnorm$matrix.test
### Sampling and model data collection
model          <- saga_sampling(matrix.SAGA, matrix.test)
matrix.train   <- model$matrix.train
labels.train   <- model$labels.train
matrix.unknown <- model$matrix.unknown
### Array predictions with optimized SVM parameters (default settings)
output         <- saga_predict(samplepath, matrix.train, labels.train, matrix.unknown,
pData.Test, writeFile=1, showRoc=1)
classes        <- output$predictions
classes
# samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples2"
#
################################################################################
### Or use these single functions
################################################################################
### saga_import
rawdata        <- saga_import(smplpath=samplepath, showjoint=1)
SAGA_RAW       <- rawdata$SAGA_RAW
TEST_RAW       <- rawdata$TEST_RAW
pData.joint    <- rawdata$pData.joint
pData.Test     <- rawdata$pData.Test
### normalize saga data (plotnumber=1 for normalized boxplot, 2 for tSNE plot)
normalized     <- saga_norm(SAGA_RAW, TEST_RAW, pData.joint, plotnumber=1)
qunorm.SAGA    <- normalized$qunorm.SAGA
matrix.SAGA.qn <- normalized$matrix.SAGA.qn
matrix.test.qn <- normalized$matrix.test.qn
### remove batch effects
# plotnumber = 1 (tSNE of first 2 dimensions)
# plotnumber = 2 (PCA of first 2 dimensions)
batchnorm      <- saga_batch(matrix.SAGA.qn, matrix.test.qn, rawdata, pData.joint, plotnumber=1)
index          <- batchnorm$index
matrix.SAGA    <- batchnorm$matrix.SAGA
matrix.test    <- batchnorm$matrix.test
### Sampling and model data collection
model          <- saga_sampling(matrix.SAGA, matrix.test)
matrix.train   <- model$matrix.train
labels.train   <- model$labels.train
matrix.unknown <- model$matrix.unknown
### Array predictions with optimized SVM parameters (default settings)
output         <- saga_predict(samplepath, matrix.train, labels.train, matrix.unknown,
pData.Test, writeFile=1, showRoc=1)
classes        <- output$predictions
classes
browseVignettes("saga")
?saga_sampling
?saga_gentargets
?saga_wrapper
?saga_import
?saga_norm
?saga_batch
?saga_sampling
?saga_predict
?saga_gesea
?saga_gentargets
pkgdown::build_site()
library(saga)
remove.packages("saga", lib="~/R/win-library/3.6")
clc
clear
clc
library(saga)
devtools::install_github("mytalbot/saga_package", build_vignettes = TRUE)
browseVignettes("saga")
library(phenoTest)
library(saga)
library(sagadata)
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
################################################################################
### Or use these single functions
################################################################################
### saga_import
rawdata        <- saga_import(smplpath=samplepath, showjoint=1)
SAGA_RAW       <- rawdata$SAGA_RAW
TEST_RAW       <- rawdata$TEST_RAW
pData.joint    <- rawdata$pData.joint
pData.Test     <- rawdata$pData.Test
### normalize saga data (plotnumber=1 for normalized boxplot, 2 for tSNE plot)
normalized     <- saga_norm(SAGA_RAW, TEST_RAW, pData.joint, plotnumber=1)
qunorm.SAGA    <- normalized$qunorm.SAGA
matrix.SAGA.qn <- normalized$matrix.SAGA.qn
matrix.test.qn <- normalized$matrix.test.qn
### remove batch effects
# plotnumber = 1 (tSNE of first 2 dimensions)
# plotnumber = 2 (PCA of first 2 dimensions)
batchnorm      <- saga_batch(matrix.SAGA.qn, matrix.test.qn, rawdata, pData.joint, plotnumber=1)
index          <- batchnorm$index
matrix.SAGA    <- batchnorm$matrix.SAGA
matrix.test    <- batchnorm$matrix.test
### Sampling and model data collection
model          <- saga_sampling(matrix.SAGA, matrix.test)
matrix.train   <- model$matrix.train
labels.train   <- model$labels.train
matrix.unknown <- model$matrix.unknown
### Array predictions with optimized SVM parameters (default settings)
output         <- saga_predict(samplepath, matrix.train, labels.train, matrix.unknown,
pData.Test, writeFile=1, showRoc=1)
classes        <- output$predictions
classes
library(saga)
pkgdown::build_site()
pkgdown::build_site()
version()
version
citation("")
citation()
