ls()
dir()
git init
library(saga)
git remote add origin https://github.com/username/reponame
remove.packages("saga", lib="~/R/win-library/3.5")
library(saaga)
library(saga)
saga
saga_batch
devtools::install_github("mytalbot/saga_package")
devtools::install_github("mytalbot/saga_package")
library(saga)
samplepath     <- "C:/MHH Bleich/Rothe/SAGA/saga_samples"
################################################################################
### Or use these single functions
################################################################################
### saga_import
rawdata        <- saga_import(samplepath, showjoint=1)
library(saga)
samplepath     <- "C:/MHH Bleich/Rothe/SAGA/saga_samples"
################################################################################
### Wrapper function - all in one
### to use: uncomment function & execute
################################################################################
mySAGAres      <- saga_wrapper(samplepath, showModel=0, doGESEA=1)
remove.packages("saga", lib="~/R/win-library/3.5")
library(saga)
samplepath     <- "C:/MHH Bleich/Rothe/SAGA/saga_samples"
### saga_gentargets; automatically generates an empty (!) sample information file
# Modify manually according to your requirements
#targets        <- saga_gentargets(samplepath)
################################################################################
### Wrapper function - all in one
### to use: uncomment function & execute
################################################################################
mySAGAres      <- saga_wrapper(samplepath, showModel=0, doGESEA=1)
devtools::install_github("mytalbot/saga_package")
install.packages("Rtools")
library("devtools", lib.loc="~/R/win-library/3.5")
install.packages("devtools")
remove.packages("saga", lib="~/R/win-library/3.5")
devtools::install_github("mytalbot/saga_package")
library(saga)
samplepath     <- "C:/MHH Bleich/Rothe/SAGA/saga_samples"
################################################################################
### Or use these single functions
################################################################################
### saga_import
rawdata        <- saga_import(samplepath, showjoint=1)
help(package = "saga", help_type = "html")
vignette("saga_vignette")
devtools::build_vignettes(pkg = ".", dependencies = "VignetteBuilder",
clean = TRUE, upgrade = "never", quiet = TRUE, install = TRUE,
keep_md = TRUE)
devtools::install(pkg = ".", build_vignettes = TRUE)
library(saga)
vignette("saga_vignette")
library(saga)
library(saga)
vignette("saga_vignette")
devtools::build_vignettes(pkg = ".", dependencies = "VignetteBuilder",
clean = TRUE, upgrade = "never", quiet = TRUE, install = TRUE,
keep_md = TRUE)
remove.packages("saga", lib="~/R/win-library/3.5")
devtools::install_github("mytalbot/saga_package",  build_vignettes = TRUE)
library(saga)
library(saga)
vignette("saga_vignette")
remove.packages("saga", lib="~/R/win-library/3.5")
devtools::install_github("mytalbot/saga_package", build_vignettes = TRUE)
library(saga)
vignette("saga_vignette")
help(package = "saga", help_type = "html")
vignette(package = "saga")
devtools::install(pkg = ".", build_vignettes = TRUE)
vignette("saga_vignette")
remove.packages("saga", lib="~/R/win-library/3.5")
library(saga)
samplepath     <- "C:/MHH Bleich/Rothe/SAGA/saga_samples"
rawdata        <- saga_import(samplepath, showjoint=1)
devtools::install_github("mytalbot/saga_package")
# to see the vignette
vignette("saga_vignette")
devtools::build_vignettes(pkg = "saga", dependencies = "VignetteBuilder")
getwd()
library(saga)
samplepath     <- "C:/MHH Bleich/Rothe/SAGA/saga_samples"
vignette("saga_vignette")
devtools::build_vignettes(pkg = "saga", dependencies = "VignetteBuilder")
devtools::build_vignettes(pkg = ".", dependencies = "VignetteBuilder")
vignette("saga_vignette")
library(saga)
vignette("saga_vignette")
devtools::build_vignettes(pkg = ".", dependencies = "VignetteBuilder",
clean = TRUE, upgrade = "never", quiet = TRUE, install = TRUE,
keep_md = TRUE)
vignette("saga_vignette")
library(saga)
vignette("saga_vignette")
library(saga)
samplepath     <- "C:/MHH Bleich/Rothe/SAGA/saga_samples"
### saga_gentargets; automatically generates an empty (!) sample informat
################################################################################
### Or use these single functions
################################################################################
### saga_import
rawdata        <- saga_import(samplepath, showjoint=1)
vignette('saga_vignette', package = 'saga')
getwd()
git init
remove.packages("saga", lib="~/R/win-library/3.5")
library(saga)
devtools::install_github("mytalbot/saga_package")
vignette("saga_vignette")
devtools::install(pkg = ".", build_vignettes = TRUE)
library(saga)
vignette("saga_vignette")
library(usethis)
use_news_md()
require("saga")
install.packages("Rtsne")
install.packages("UsingR")
install.packages("bapred")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("limma")
BiocManager::install("phenoTest")
BiocManager::install("sva")
BiocManager::install("affyPLM")
library(saga)
library(saga)
saga::Annotation
dim(saga:Annotation)
dim(saga::Annotation)
names(saga::Annotation)
saga::pData
dim(saga::pData)
class(saga::pData)
saga::Top12
dim(saga::Top12)
saga::sets
class(saga::sets)
dim(saga::sets)
library(saga)
?text
?prcomp
?write.table
?setNames
?read.delim
?ne
?new
?pdf
ÃŸdev.off()
?dev.off()
?boxplot
?predict
?write.table
library(saga)
?predict
use_namespace()
library(saga)
use_namespace()
library(saga)
?write.table
use_namespace()
library(saga)
library(saga)
use_namespace()
library(saga)
use_namespace()
library(saga)
use_namespace()
library(saga)
use_namespace()
library(saga)
myrawpath         <- "C:/MHH Bleich/Rothe/SAGA/Prepare internal data"
myroot            <- "C:/MHH Bleich/Rothe/SAGA/saga"
setwd(myroot)
# pdata
rawfile           <- paste(myrawpath, "/SAGA_INBUILD_91_Samples.txt", sep="")
dat               <- read.delim(rawfile,row.names=1,header=TRUE,sep="\t",stringsAsFactors =FALSE)
rownames(dat)     <- gsub("[-]",".", rownames(dat))
pData             <- dat
usethis::use_data(pData, overwrite=TRUE,  compress = "bzip2")
# SAGA V6
# Inbuild files are in the V6 sandbox
myrawpath         <- "C:/MHH Bleich/Rothe/SAGA/Prepare internal data"
myroot            <- "C:/MHH Bleich/Rothe/SAGA/saga"
setwd(myroot)
# pdata
rawfile           <- paste(myrawpath, "/SAGA_INBUILD_91_Samples.txt", sep="")
dat               <- read.delim(rawfile,row.names=1,header=TRUE,sep="\t",stringsAsFactors =FALSE)
rownames(dat)     <- gsub("[-]",".", rownames(dat))
pData             <- dat
usethis::use_data(pData, overwrite=TRUE)
nbuild files are in the V6 sandbox
myrawpath         <- "C:/MHH Bleich/Rothe/SAGA/Prepare internal data"
myroot            <- "C:/MHH Bleich/Rothe/SAGA/saga"
setwd(myroot)
myrawpath         <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/Prepare internal data"
myroot            <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga"
setwd(myroot)
# pdata
rawfile           <- paste(myrawpath, "/SAGA_INBUILD_91_Samples.txt", sep="")
dat               <- read.delim(rawfile,row.names=1,header=TRUE,sep="\t",stringsAsFactors =FALSE)
rownames(dat)     <- gsub("[-]",".", rownames(dat))
pData             <- dat
usethis::use_data(pData, overwrite=TRUE)
# SAGA_Data
rawfile           <- paste(myrawpath, "/SAGA_INBUILD_Data_AVE_91.txt", sep="")
dat               <- read.delim(rawfile, header=TRUE,sep="\t",stringsAsFactors =FALSE)
rownames(dat)     <- gsub("[-]",".", rownames(dat))
SAGA_Data         <- dat
usethis::use_data(SAGA_Data, overwrite=TRUE, compress = "bzip2")
myrawpath
rawfile           <- paste(myrawpath, "/SAGA_INBUILD_Data_AVE_91.txt", sep="")
dat               <- read.delim(rawfile, header=TRUE,sep="\t",stringsAsFactors =FALSE)
rownames(dat)     <- gsub("[-]",".", rownames(dat))
SAGA_Data         <- dat
usethis::use_data(SAGA_Data, overwrite=TRUE, compress = "bzip2")
library(saga)
saga::SAGA_Data
dim(saga::SAGA_Data)
library(saga)
library(saga)
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples" #path to SAGA samples"
### saga_gentargets; automatically generates an empty (!) sample information file
# Modify manually according to your requirements
#targets        <- saga_gentargets(samplepath)
################################################################################
### Wrapper function - all in one
### to use: uncomment function & execute
################################################################################
mySAGAres      <- saga_wrapper(samplepath, showModel=0, doGESEA=1)
library(usethis)
use_citation()
library(saga)
library(saga)
citation("saga")
library(saga)
library(usethis)
use_readme_rmd()
library(saga)
use_namespace()
library(saga)
source('C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga/R/saga_import.R', echo=TRUE)
library(saga)
library(sagadata)
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples" #path to SAGA samples"
################################################################################
### Or use these single functions
################################################################################
### saga_import
rawdata        <- saga_import(samplepath, showjoint=1)
?read.maimages
sagadata::SAGA_Data
?read.maimages
library(saga)
?read.maimages
library(saga)
library(sagadata)
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples" #path to SAGA samples"
### saga_gentargets; automatically generates an empty (!) sample information file
# Modify manually according to your requirements
#targets        <- saga_gentargets(samplepath)
################################################################################
### Wrapper function - all in one
### to use: uncomment function & execute
################################################################################
mySAGAres      <- saga_wrapper(samplepath, showModel=0, doGESEA=1)
################################################################################
### Or use these single functions
################################################################################
### saga_import
rawdata        <- saga_import(samplepath, showjoint=1)
library(limma)
################################################################################
### Or use these single functions
################################################################################
### saga_import
rawdata        <- saga_import(samplepath, showjoint=1)
?avereps
library(saga)
library(saga)
library(sagadata)
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples" #path to SAGA samples"
rawdata        <- saga_import(samplepath, showjoint=1)
library(saga)
rawdata        <- saga_import(samplepath, showjoint=1)
library(sagadata)
use_logo("C:/MHH Bleich/Packages/Heximage/SAGA_logo.png")
?read.delim
use_namespace()
library(saga)
library(saga)
library(saga)
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples" #path to SAGA samples"
rawdata        <- saga_import(samplepath, SAGA_Data, showjoint=1)
library(saga)
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples" #path to SAGA samples"
rawdata        <- saga_import(samplepath, SAGA_Data, showjoint=1)
library(saga)
library(saga)
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples" #path to SAGA samples"
rawdata        <- saga_import(samplepath, SAGA_Data, showjoint=1)
library(saga)
SAGA_Data
SAGA_Data
library(saga)
library(sagadata)
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples" #path to SAGA samples"
rawdata        <- saga_import(samplepath, showjoint=1)
source('C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga/R/saga_import.R', echo=TRUE)
source('C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga/R/saga_wrapper.R', echo=TRUE)
library(saga)
library(sagadata)
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples" #path to SAGA samples"
rawdata        <- saga_import(samplepath, showjoint=1)
library(saga)
library(saga)
library(sagadata)
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples" #path to SAGA samples"
rawdata        <- saga_import(samplepath, showjoint=1)
pkgdown::build_site()
?attach
remove.packages("saga", lib="~/R/win-library/3.6")
remove.packages("sagadata", lib="~/R/win-library/3.6")
library(saga)
library(sagadata)
devtools::install_github("mytalbot/saga_package")
devtools::install_github("mytalbot/sagadata")
library(saga)
library(sagadata)
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
### saga_gentargets; automatically generates an empty (!) sample information file
# Modify manually according to your requirements
#targets        <- saga_gentargets(samplepath)
################################################################################
### Wrapper function - all in one
### to use: uncomment function & execute
################################################################################
mySAGAres      <- saga_wrapper(samplepath, showModel=0, doGESEA=1)
?exprs
################################################################################
### Or use these single functions
################################################################################
### saga_import
rawdata        <- saga_import(samplepath, showjoint=1)
SAGA_RAW       <- rawdata$SAGA_RAW
TEST_RAW       <- rawdata$TEST_RAW
pData.joint    <- rawdata$pData.joint
pData.Test     <- rawdata$pData.Test
### normalize saga data (plotnumber=1 for normalized boxplot, 2 for tSNE plot)
normalized     <- saga_norm(SAGA_RAW, TEST_RAW, pData.joint, plotnumber=1)
qunorm.SAGA    <- normalized$qunorm.SAGA
matrix.SAGA.qn <- normalized$matrix.SAGA.qn
matrix.test.qn <- normalized$matrix.test.qn
### remove batch effects
# plotnumber = 1 (tSNE of first 2 dimensions)
# plotnumber = 2 (PCA of first 2 dimensions)
batchnorm      <- saga_batch(matrix.SAGA.qn, matrix.test.qn, rawdata, pData.joint, plotnumber=1)
index          <- batchnorm$index
matrix.SAGA    <- batchnorm$matrix.SAGA
matrix.test    <- batchnorm$matrix.test
### Sampling and model data collection
model          <- saga_sampling(matrix.SAGA, matrix.test)
matrix.train   <- model$matrix.train
labels.train   <- model$labels.train
matrix.unknown <- model$matrix.unknown
### Array predictions with optimized SVM parameters (default settings)
output         <- saga_predict(samplepath, matrix.train, labels.train, matrix.unknown,
pData.Test, writeFile=1, showRoc=0)
classes        <- output$predictions
classes
### GESEA
gesea_results  <- saga_gesea(samplepath, saveResults=1)
library(saga)
source('C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga/R/saga_gesea.R', echo=TRUE)
### GESEA
gesea_results  <- saga_gesea(samplepath, saveResults=1)
sets        <- saga::sets
SAGA.CORE   <- setNames(split(sets, seq(nrow(sets))), rownames(sets))   # GeneSets have to be stored in a list object
SIF         <- read.delim(paste(smplpath,"/SampleInformation.txt",sep=""),row.names=1,header=TRUE,sep="\t", stringsAsFactors = F) # Sample Information File for phenoTest
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
smplpath<-samplepath
sets        <- saga::sets
SAGA.CORE   <- setNames(split(sets, seq(nrow(sets))), rownames(sets))   # GeneSets have to be stored in a list object
SIF         <- read.delim(paste(smplpath,"/SampleInformation.txt",sep=""),row.names=1,header=TRUE,sep="\t", stringsAsFactors = F) # Sample Information File for phenoTest
### 1.1. Read in files from test and loop over all batches separately from here on ##############
#################################################################################################
maxBatch   <- max(as.integer(SIF$Batch))   # how many assays / batches
i=1
SIF.i <- SIF[SIF$Batch==i,]
RAW.i <- limma::read.maimages(files=SIF.i$Filename, path=smplpath, source="agilent.median", green.only=T,
columns=list(G="gMedianSignal"), annotation=c("ProbeName", "GeneName"))
colnames(RAW.i) <- row.names(SIF.i)
#### 2.1. Normalize, average ###################################################################
RMA.i       <- limma::normalizeBetweenArrays(RAW.i, method="quantile")  # quantil normalize
RMA.i       <- limma::avereps(RMA.i,ID= RMA.i$genes$ProbeName)          # average replicates to one value for each probe
matrix.gsea <- RMA.i$E
#### 2.3. make ExpressionSet (Biobase) object ##################################################
metadata    <- data.frame(labelDescription= rep(NA,dim(SIF.i)[2]),row.names=colnames(SIF.i))   # varMetadata: empty, but required
phenoData   <- new("AnnotatedDataFrame",data=SIF.i, varMetadata=metadata)     # annotatedDataFrame for the annotation of the samples
eset.gsea   <- Biobase::ExpressionSet(assayData = matrix.gsea, phenoData = phenoData)  # this is the ExpressionSet required for phenoTest
#### 2.4. make ePheno object: contains the FCs associated with Group variable ##################
vars2test   <- list(ordinal="Group")    # Variables (here: Groups) to test against MOCK, which are always Group = 1 in the SIF
epheno.gsea <- phenoTest::ExpressionPhenoTest(eset.gsea,vars2test,p.adjust.method='BH')
phenoTest
vars2test   <- list(ordinal="Group")    # Variables (here: Groups) to test against MOCK, which are always Group = 1 in the SIF
epheno.gsea <- phenoTest::ExpressionPhenoTest(eset.gsea,vars2test,p.adjust.method='BH')
eset.gsea
vars2test
ExpressionPhenoTest(eset.gsea,vars2test,p.adjust.method='BH')
?ExpressionPhenoTest
source('C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga/R/saga_gesea.R', echo=TRUE)
epheno.gsea <- phenoTest::ExpressionPhenoTest(eset.gsea,vars2test,p.adjust.method='BH')
phenoTest::ExpressionPhenoTest
vars2test
library(saga)
vars2test
epheno.gsea <- phenoTest::ExpressionPhenoTest(eset.gsea,vars2test,p.adjust.method='BH')
source('C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga/R/saga_gesea.R', echo=TRUE)
epheno.gsea <- phenoTest::ExpressionPhenoTest(eset.gsea,vars2test,p.adjust.method='BH')
?ExpressionPhenoTest
metadata    <- data.frame(labelDescription= rep(NA,dim(SIF.i)[2]),row.names=colnames(SIF.i))   # varMetadata: empty, but required
phenoData   <- new("AnnotatedDataFrame",data=SIF.i, varMetadata=metadata)     # annotatedDataFrame for the annotation of the samples
eset.gsea   <- Biobase::ExpressionSet(assayData = matrix.gsea, phenoData = phenoData)  # this is the ExpressionSet required for phenoTest
#### 2.4. make ePheno object: contains the FCs associated with Group variable ##################
vars2test   <- list(ordinal="Group")    # Variables (here: Groups) to test against MOCK, which are always Group = 1 in the SIF
epheno.gsea <- phenoTest::ExpressionPhenoTest(eset.gsea,vars2test,p.adjust.method='BH')
eset.gsea
class(eset.gsea)
epheno.gsea
?phenoTest
eset.gsea
?ExpressionPhenoTest
survival <- matrix(c("Relapse","Months2Relapse"),ncol=2,byrow=TRUE)
colnames(survival) <- c('event','time')
vars2test <- list(survival=survival)
#run ExpressionPhenoTest
epheno <- ExpressionPhenoTest(eset,vars2test,p.adjust.method='none')
epheno
library(phenoTest)
vars2test   <- list(ordinal="Group")    # Variables (here: Groups) to test against MOCK, which are always Group = 1 in the SIF
epheno.gsea <- phenoTest::ExpressionPhenoTest(eset.gsea,vars2test,p.adjust.method='BH')
library(saga)
library(saga)
source('C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga/R/saga_gesea.R', echo=TRUE)
vars2test   <- list(ordinal="Group")    # Variables (here: Groups) to test against MOCK, which are always Group = 1 in the SIF
epheno.gsea <- phenoTest::ExpressionPhenoTest(eset.gsea,vars2test,p.adjust.method='BH')
library(saga)
library(sagadata)
samplepath     <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/saga_samples"
### saga_gentargets; automatically generates an empty (!) sample information file
# Modify manually according to your requirements
#targets        <- saga_gentargets(samplepath)
################################################################################
### Wrapper function - all in one
### to use: uncomment function & execute
################################################################################
mySAGAres      <- saga_wrapper(samplepath, showModel=0, doGESEA=1)
citation()
citation()[1]
str(citation() )
citation()$title
citation()
str(citation())
citation()@textVersion
?citation
c<-citation()
c
c<-citation()
str(c)
attr(citation())
attr(citation(),"textVersion")
attr(citation("limma"),"textVersion")
lapply(citation(), attributes)
citation()%.%textVersion
citation()%.%"textVersion"
citation()
getwd()
capture.output(utils:::print.bibentry(citation(), style = "Bibtex"), file = "endnote_import.bib")
capture.output(utils:::print.bibentry(citation("limma"), style = "Bibtex"), file = "endnote_import.bib")
path <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/Package Citations/"
capture.output(utils:::print.bibentry(citation(), style = "Bibtex"), file = paste(path, "base_R.bib",sep=""))
capture.output(utils:::print.bibentry(citation("limma"), style = "Bibtex"), file = paste(path, "limma.bib",sep=""))
capture.output(utils:::print.bibentry(citation("Biobase"), style = "Bibtex"), file = paste(path, "Biobase.bib",sep=""))
path <- "C:/MHH Bleich/Kooperationen/Rothe/SAGA/Package Citations/"
capture.output(utils:::print.bibentry(citation(), style = "Bibtex"), file = paste(path, "base_R.bib",sep=""))
capture.output(utils:::print.bibentry(citation("limma"), style = "Bibtex"), file = paste(path, "limma.bib",sep=""))
capture.output(utils:::print.bibentry(citation("Biobase"), style = "Bibtex"), file = paste(path, "Biobase.bib",sep=""))
capture.output(utils:::print.bibentry(citation("Rtsne"), style = "Bibtex"), file = paste(path, "Rtsne.bib",sep=""))
capture.output(utils:::print.bibentry(citation("UsingR"), style = "Bibtex"), file = paste(path, "UsingR.bib",sep=""))
capture.output(utils:::print.bibentry(citation("bapred"), style = "Bibtex"), file = paste(path, "bapred.bib",sep=""))
capture.output(utils:::print.bibentry(citation("caret"), style = "Bibtex"), file = paste(path, "caret.bib",sep=""))
capture.output(utils:::print.bibentry(citation("gridExtra"), style = "Bibtex"), file = paste(path, "gridExtra.bib",sep=""))
capture.output(utils:::print.bibentry(citation("pROC"), style = "Bibtex"), file = paste(path, "pROC.bib",sep=""))
capture.output(utils:::print.bibentry(citation("phenoTest"), style = "Bibtex"), file = paste(path, "phenoTest.bib",sep=""))
capture.output(utils:::print.bibentry(citation("sva"), style = "Bibtex"), file = paste(path, "sva.bib",sep=""))
capture.output(utils:::print.bibentry(citation("graphics"), style = "Bibtex"), file = paste(path, "graphics.bib",sep=""))
capture.output(utils:::print.bibentry(citation("stats"), style = "Bibtex"), file = paste(path, "stats.bib",sep=""))
capture.output(utils:::print.bibentry(citation("utils"), style = "Bibtex"), file = paste(path, "utils.bib",sep=""))
capture.output(utils:::print.bibentry(citation("methods"), style = "Bibtex"), file = paste(path, "methods.bib",sep=""))
capture.output(utils:::print.bibentry(citation("grDevices"), style = "Bibtex"), file = paste(path, "grDevices.bib",sep=""))
capture.output(utils:::print.bibentry(citation("lattice"), style = "Bibtex"), file = paste(path, "lattice.bib",sep=""))
capture.output(utils:::print.bibentry(citation("ggplot2"), style = "Bibtex"), file = paste(path, "ggplot2.bib",sep=""))
capture.output(utils:::print.bibentry(citation("affyPLM"), style = "Bibtex"), file = paste(path, "affyPLM.bib",sep=""))
capture.output(utils:::print.bibentry(citation("BiocGenerics"), style = "Bibtex"), file = paste(path, "BiocGenerics.bib",sep=""))
capture.output(utils:::print.bibentry(citation("parallel"), style = "Bibtex"), file = paste(path, "parallel.bib",sep=""))
getwd()
getwd()
